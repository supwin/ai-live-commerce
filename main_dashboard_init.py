#!/usr/bin/env python3
import sys
import os
from pathlib import Path
from sqlalchemy.orm import Session

# Add app directory to path
sys.path.append(str(Path(__file__).parent))

from app.core.database import engine, SessionLocal, create_tables
from app.models.product import Product, ProductStatus
from app.models.script import Script, ScriptPersona, VoicePersona, ScriptType, GenderType
from app.models.user import User
from app.core.security import SecurityManager

def create_sample_personas(db: Session):
    print("\nüë§ Creating sample personas...")
    
    script_personas = [
        {
            "name": "Energetic Seller",
            "description": "‡πÄ‡∏ã‡∏•‡∏™‡πå‡∏°‡∏±‡∏ô‡∏™‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏£‡∏∞‡∏ï‡∏∑‡∏≠‡∏£‡∏∑‡∏≠‡∏£‡πâ‡∏ô‡∏™‡∏π‡∏á",
            "personality_traits": ["enthusiastic", "confident", "persuasive"],
            "speaking_style": "‡∏û‡∏π‡∏î‡πÄ‡∏£‡πá‡∏ß ‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏•‡∏±‡∏á",
            "target_audience": "‡∏ß‡∏±‡∏¢‡∏£‡∏∏‡πà‡∏ô ‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏ö‡∏ö impulse buy",
            "system_prompt": "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ã‡∏•‡∏™‡πå‡∏°‡∏±‡∏ô‡∏™‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á‡∏™‡∏π‡∏á ‡∏û‡∏π‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô",
            "sample_phrases": ["‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î‡∏°‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö!", "‡πÄ‡∏à‡πã‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÄ‡∏•‡∏¢!"],
            "tone_guidelines": "‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á",
            "do_say": ["‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î", "‡πÄ‡∏à‡πã‡∏á‡∏°‡∏≤‡∏Å"],
            "dont_say": ["‡∏≠‡∏≤‡∏à‡∏à‡∏∞", "‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à"],
            "default_emotion": "excited",
            "available_emotions": ["excited", "energetic"],
            "sort_order": 1
        }
    ]
    
    # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

    for persona_data in script_personas:
        persona = ScriptPersona(**persona_data)
        db.add(persona)
    
    # Voice Personas
    voice_personas = [
        {
            "name": "Professional Female",
            "description": "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏´‡∏ç‡∏¥‡∏á‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à",
            "tts_provider": "edge",
            "voice_id": "th-TH-PremwadeeNeural",
            "language": "th",
            "gender": GenderType.FEMALE,
            "age_range": "adult",
            "accent": "thai_central",
            "speed": 0.9,
            "pitch": 1.0,
            "volume": 1.0,
            "emotion": "professional",
            "emotional_range": ["professional", "confident", "calm"],
            "provider_settings": {"style": "general"},
            "quality_rating": 5,
            "is_active": True
        },
        {
            "name": "Energetic Male",
            "description": "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ä‡∏≤‡∏¢‡∏£‡πà‡∏≤‡πÄ‡∏£‡∏¥‡∏á ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á",
            "tts_provider": "edge",
            "voice_id": "th-TH-NiwatNeural",
            "language": "th",
            "gender": GenderType.MALE,
            "age_range": "young",
            "accent": "thai_central",
            "speed": 1.1,
            "pitch": 1.1,
            "volume": 1.0,
            "emotion": "energetic",
            "emotional_range": ["energetic", "excited", "confident"],
            "provider_settings": {"style": "cheerful"},
            "quality_rating": 4,
            "is_active": True
        },
        {
            "name": "Gentle Female",
            "description": "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏´‡∏ç‡∏¥‡∏á‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ô ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏•‡∏ü‡πå‡∏™‡πÑ‡∏ï‡∏•‡πå",
            "tts_provider": "google",
            "voice_id": "th",
            "language": "th",
            "gender": GenderType.FEMALE,
            "age_range": "adult",
            "accent": "thai_central",
            "speed": 0.8,
            "pitch": 0.9,
            "volume": 1.0,
            "emotion": "gentle",
            "emotional_range": ["gentle", "warm", "caring"],
            "provider_settings": {},
            "quality_rating": 3,
            "is_active": True
        },
        {
            "name": "Dynamic Male",
            "description": "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ä‡∏≤‡∏¢‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ",
            "tts_provider": "edge",
            "voice_id": "th-TH-NiwatNeural",
            "language": "th",
            "gender": GenderType.MALE,
            "age_range": "adult",
            "accent": "thai_central",
            "speed": 1.0,
            "pitch": 1.0,
            "volume": 1.0,
            "emotion": "dynamic",
            "emotional_range": ["dynamic", "confident", "professional"],
            "provider_settings": {"style": "newscast"},
            "quality_rating": 4,
            "is_active": True
        }
    ]
    
    for voice_data in voice_personas:
        voice = VoicePersona(**voice_data)
        db.add(voice)
    
    print(f"‚úÖ Created {len(script_personas)} script personas and {len(voice_personas)} voice personas")

def create_sample_products(db: Session):
    """Create sample products with detailed information for AI script generation"""
    print("\nüì¶ Creating sample products...")
    
    products = [
        {
            "sku": "CAM-AI-4K-001",
            "name": "AI Smart Camera Pro 4K",
            "description": "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ 4K ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ö‡πâ‡∏≤‡∏ô ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏Ñ‡∏°‡∏ä‡∏±‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô",
            "price": 2999.00,
            "original_price": 3999.00,
            "discount_percentage": 25,
            "category": "electronics",
            "brand": "SmartHome Pro",
            "stock_quantity": 50,
            "key_features": [
                "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î 4K Ultra HD",
                "‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß",
                "Night Vision ‡∏ä‡∏±‡∏î‡πÅ‡∏°‡πâ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏∑‡∏î",
                "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô Smartphone",
                "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏•‡∏á Cloud Storage",
                "‡∏Å‡∏±‡∏ô‡∏ô‡πâ‡∏≥ IP65",
                "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏á‡πà‡∏≤‡∏¢ ‡πÑ‡∏£‡πâ‡∏™‡∏≤‡∏¢ WiFi"
            ],
            "selling_points": [
                "‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÑ‡∏ü 70% ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏∏‡πà‡∏ô‡πÄ‡∏Å‡πà‡∏≤",
                "‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô 2 ‡∏õ‡∏µ‡πÄ‡∏ï‡πá‡∏°",
                "‡∏™‡πà‡∏á‡∏ü‡∏£‡∏µ‡∏ó‡∏±‡πà‡∏ß‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®",
                "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ü‡∏£‡∏µ‡πÉ‡∏ô‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û",
                "‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏î‡∏µ 4.8/5 ‡∏î‡∏≤‡∏ß"
            ],
            "target_audience": "‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏ô ‡∏ô‡∏±‡∏Å‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à ‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏´‡πà‡∏ß‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢",
            "use_cases": [
                "‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ö‡πâ‡∏≤‡∏ô",
                "‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤",
                "‡∏î‡∏π‡πÅ‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏",
                "‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á"
            ],
            "promotion_text": "üî• Flash Sale! ‡∏•‡∏î 25% ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏û‡∏µ‡∏¢‡∏á 2,999 ‡∏ö‡∏≤‡∏ó (‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤ 3,999 ‡∏ö‡∏≤‡∏ó) ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô! ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏°‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤ 500 ‡∏ö‡∏≤‡∏ó",
            "warranty_info": "‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ 2 ‡∏õ‡∏µ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡∏ü‡∏£‡∏µ",
            "shipping_info": "‡∏™‡πà‡∏á‡∏ü‡∏£‡∏µ‡∏ó‡∏±‡πà‡∏ß‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1-2 ‡∏ß‡∏±‡∏ô",
            "tags": ["camera", "security", "AI", "4K", "smart-home"],
            "status": ProductStatus.ACTIVE
        },
        {
            "sku": "EAR-WL-PRO-002",
            "name": "Wireless Earbuds Elite Pro",
            "description": "‡∏´‡∏π‡∏ü‡∏±‡∏á‡πÑ‡∏£‡πâ‡∏™‡∏≤‡∏¢ Premium ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏±‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡∏ö‡∏Å‡∏ß‡∏ô Active Noise Cancelling ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏µ‡∏¢‡∏á Hi-Fi ‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏ô‡∏ô‡∏≤‡∏ô 8 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á",
            "price": 1599.00,
            "original_price": 2299.00,
            "discount_percentage": 30,
            "category": "electronics",
            "brand": "AudioTech Elite",
            "stock_quantity": 75,
            "key_features": [
                "Active Noise Cancelling (ANC)",
                "‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏µ‡∏¢‡∏á Hi-Fi Premium",
                "‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà 8 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á + ‡πÄ‡∏Ñ‡∏™ 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á",
                "‡∏Å‡∏±‡∏ô‡∏ô‡πâ‡∏≥ IPX7",
                "Quick Charge 15 ‡∏ô‡∏≤‡∏ó‡∏µ = 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á",
                "Touch Control ‡∏™‡∏∞‡∏î‡∏ß‡∏Å",
                "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Bluetooth 5.3"
            ],
            "selling_points": [
                "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏ö‡∏™‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏ö‡∏ö Studio",
                "‡πÉ‡∏™‡πà‡∏™‡∏ö‡∏≤‡∏¢ ‡πÑ‡∏°‡πà‡∏´‡∏•‡∏∏‡∏î",
                "‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö iOS ‡πÅ‡∏•‡∏∞ Android",
                "‡∏°‡∏µ‡πÅ‡∏≠‡∏û‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á",
                "‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å‡∏î‡∏≤‡∏£‡∏≤ ‡∏ô‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏á"
            ],
            "target_audience": "‡∏ô‡∏±‡∏Å‡∏ü‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏á ‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤ ‡∏Ñ‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô Gen Y-Z",
            "use_cases": [
                "‡∏ü‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á",
                "‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢",
                "Work from Home",
                "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô Online",
                "‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á"
            ],
            "promotion_text": "üí• Super Sale! ‡∏´‡∏π‡∏ü‡∏±‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö Pro ‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏© 30% ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 1,599 ‡∏ö‡∏≤‡∏ó ‡πÅ‡∏ñ‡∏°‡∏ü‡∏£‡∏µ ‡πÄ‡∏Ñ‡∏™‡∏´‡∏ô‡∏±‡∏á Premium ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤ 399 ‡∏ö‡∏≤‡∏ó!",
            "status": ProductStatus.ACTIVE
        },
        {
            "sku": "HUB-SM-CTRL-003",
            "name": "Smart Home Hub Central",
            "description": "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏£‡∏∏‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå IoT ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏≠‡∏û ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÑ‡∏ü‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
            "price": 3999.00,
            "category": "electronics",
            "brand": "SmartLife Tech",
            "stock_quantity": 30,
            "key_features": [
                "‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå 50+ ‡∏ä‡∏¥‡πâ‡∏ô",
                "‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á (Voice Control)",
                "‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
                "‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÑ‡∏ü 40%",
                "‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Alexa, Google Assistant",
                "‡πÅ‡∏≠‡∏û SmartLife ‡πÉ‡∏ä‡πâ‡∏á‡πà‡∏≤‡∏¢",
                "‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á"
            ],
            "selling_points": [
                "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏á‡πà‡∏≤‡∏¢ 10 ‡∏ô‡∏≤‡∏ó‡∏µ",
                "‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü 2,000 ‡∏ö‡∏≤‡∏ó/‡∏õ‡∏µ",
                "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Feature ‡∏ü‡∏£‡∏µ‡∏ï‡∏•‡∏≠‡∏î‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï",
                "‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Smart Device ‡∏ó‡∏∏‡∏Å‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠"
            ],
            "target_audience": "‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏ô ‡∏Ñ‡∏ô‡∏£‡∏±‡∏Å‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏¢‡∏∏‡∏Ñ‡πÉ‡∏´‡∏°‡πà",
            "status": ProductStatus.ACTIVE
        },
        {
            "sku": "KEY-GME-RGB-004",
            "name": "Gaming Mechanical Keyboard RGB",
            "description": "‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÄ‡∏Å‡∏°‡∏°‡∏¥‡πà‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÇ‡∏õ‡∏£ ‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå Mechanical ‡πÅ‡∏ó‡πâ ‡πÑ‡∏ü RGB ‡πÅ‡∏ö‡∏ö Custom ‡∏û‡∏£‡πâ‡∏≠‡∏° Macro Keys ‡πÅ‡∏•‡∏∞ Anti-Ghosting ‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö",
            "price": 2599.00,
            "category": "electronics",
            "brand": "GamePro Elite",
            "stock_quantity": 40,
            "key_features": [
                "‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå Mechanical Cherry MX Blue",
                "‡πÑ‡∏ü RGB 16.8 ‡∏•‡πâ‡∏≤‡∏ô‡∏™‡∏µ",
                "Anti-Ghosting ‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö",
                "Macro Keys 12 ‡∏õ‡∏∏‡πà‡∏°",
                "‡πÇ‡∏Ñ‡∏£‡∏á‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á",
                "‡∏õ‡∏∏‡πà‡∏° Multimedia ‡∏û‡∏¥‡πÄ‡∏®‡∏©",
                "Cable ‡∏ñ‡∏≠‡∏î‡πÑ‡∏î‡πâ"
            ],
            "selling_points": [
                "‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á Gaming ‡πÅ‡∏•‡∏∞ Office",
                "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ô‡∏∏‡πà‡∏°‡∏´‡∏π",
                "‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô 3 ‡∏õ‡∏µ",
                "‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏î‡∏µ‡∏à‡∏≤‡∏Å Pro Gamer"
            ],
            "target_audience": "‡∏ô‡∏±‡∏Å‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏° ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏°‡∏≠‡∏£‡πå ‡∏Ñ‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≠‡∏°‡∏ô‡∏≤‡∏ô",
            "status": ProductStatus.ACTIVE
        },
        {
            "sku": "SSD-PORT-1TB-005",
            "name": "Portable SSD External 1TB",
            "description": "SSD ‡∏û‡∏Å‡∏û‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á 1TB ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤ HDD ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ 10 ‡πÄ‡∏ó‡πà‡∏≤ ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å ‡πÄ‡∏ö‡∏≤ ‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏∞‡πÅ‡∏ó‡∏Å ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏Å‡∏£‡∏≤‡∏ü‡∏¥‡∏Å ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠",
            "price": 3499.00,
            "category": "electronics",
            "brand": "SpeedDrive Pro",
            "stock_quantity": 60,
            "key_features": [
                "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏ 1TB (1,000 GB)",
                "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏≠‡πà‡∏≤‡∏ô 1,000 MB/s",
                "‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å 10x5x1 ‡∏ã‡∏°.",
                "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏ö‡∏≤ 150 ‡∏Å‡∏£‡∏±‡∏°",
                "‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏∞‡πÅ‡∏ó‡∏Å Military Grade",
                "‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö USB-C ‡πÅ‡∏•‡∏∞ USB-A",
                "‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á Mac ‡πÅ‡∏•‡∏∞ PC"
            ],
            "selling_points": [
                "‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤ HDD ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ 10 ‡πÄ‡∏ó‡πà‡∏≤",
                "‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà 90%",
                "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡∏ö‡∏Å‡∏ß‡∏ô",
                "‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÑ‡∏ü 70%"
            ],
            "target_audience": "‡∏ô‡∏±‡∏Å‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏°‡∏≠‡∏£‡πå ‡∏ä‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏û ‡∏Ñ‡∏ô‡∏ó‡∏≥‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠",
            "status": ProductStatus.ACTIVE
        },
        {
            "sku": "CHG-WL-STAND-006",
            "name": "Wireless Charging Stand Pro",
            "description": "‡πÅ‡∏ó‡πà‡∏ô‡∏ä‡∏≤‡∏£‡πå‡∏à‡πÑ‡∏£‡πâ‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡πâ‡∏á ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Fast Charging 15W ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏û‡∏±‡∏î‡∏•‡∏°‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô‡πÉ‡∏ô‡∏ï‡∏±‡∏ß ‡∏ä‡∏≤‡∏£‡πå‡∏à‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô",
            "price": 899.00,
            "original_price": 1299.00,
            "discount_percentage": 31,
            "category": "electronics",
            "brand": "ChargeTech Pro",
            "stock_quantity": 80,
            "key_features": [
                "Fast Charging 15W",
                "‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö iPhone ‡πÅ‡∏•‡∏∞ Samsung",
                "‡∏û‡∏±‡∏î‡∏•‡∏°‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
                "‡∏ä‡∏≤‡∏£‡πå‡∏à‡πÑ‡∏î‡πâ 2 ‡∏ó‡πà‡∏≤ (‡∏ï‡∏±‡πâ‡∏á/‡∏ô‡∏≠‡∏ô)",
                "‡πÑ‡∏ü LED ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
                "‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏ü‡πÄ‡∏Å‡∏¥‡∏ô",
                "‡πÇ‡∏Ñ‡∏£‡∏á‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á"
            ],
            "selling_points": [
                "‡∏ä‡∏≤‡∏£‡πå‡∏à‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏¢ USB ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤",
                "‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ 100% ‡πÑ‡∏°‡πà‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ",
                "‡πÉ‡∏ä‡πâ‡∏Ç‡∏ì‡∏∞‡∏î‡∏π‡∏´‡∏ô‡∏±‡∏á Video Call ‡πÑ‡∏î‡πâ",
                "‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏™‡∏≤‡∏¢‡∏ä‡∏≤‡∏£‡πå‡∏à"
            ],
            "target_audience": "‡∏Ñ‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏™‡∏≤‡∏¢ Gadget ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ Smartphone ‡∏£‡∏∏‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà",
            "promotion_text": "üéÅ ‡∏•‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏© 31% ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 899 ‡∏ö‡∏≤‡∏ó ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ñ‡∏°‡∏™‡∏≤‡∏¢‡∏ä‡∏≤‡∏£‡πå‡∏à Type-C ‡∏ü‡∏£‡∏µ! ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î",
            "status": ProductStatus.ACTIVE
        }
    ]
    
    for product_data in products:
        product = Product(**product_data)
        db.add(product)
    
    print(f"‚úÖ Created {len(products)} sample products")

def create_sample_user(db: Session):
    """Create demo user"""
    print("\nüë§ Creating demo user...")
    
    # Check if demo user already exists
    existing_user = db.query(User).filter(User.email == "demo@example.com").first()
    if existing_user:
        print("‚ÑπÔ∏è Demo user already exists")
        return
    
    demo_user = User(
        email="demo@example.com",
        username="demo",
        hashed_password=SecurityManager.get_password_hash("demo123"),
        full_name="Demo User",
        is_active=True,
        is_superuser=False,
        preferences={
            "theme": "light",
            "language": "th",
            "notifications": True
        }
    )
    
    db.add(demo_user)
    print("‚úÖ Created demo user:")
    print("   üìß Email: demo@example.com")
    print("   üë§ Username: demo")
    print("   üîë Password: demo123")

def create_sample_scripts(db: Session):
    """Create sample scripts for some products"""
    print("\nüìù Creating sample scripts...")
    
    # Get first 3 products and personas
    products = db.query(Product).limit(3).all()
    personas = db.query(ScriptPersona).all()
    
    if not products or not personas:
        print("‚ö†Ô∏è No products or personas found, skipping scripts")
        return
    
    sample_scripts = []
    
    # Script for AI Smart Camera
    if len(products) > 0:
        camera_scripts = [
            {
                "product_id": products[0].id,
                "persona_id": personas[0].id if personas else None,
                "title": "AI Smart Camera - Energetic Introduction",
                "content": """{excited}‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ç‡πà‡∏≤‡∏ß‡∏î‡∏µ‡∏°‡∏≤‡πÅ‡∏ä‡∏£‡πå‡∏Å‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö!{/excited} 

{confident}‡∏Ç‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ AI Smart Camera Pro 4K ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Smart Home ‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û!{/confident}

üåü ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©:
‚Ä¢ {excited}‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î 4K Ultra HD ‡∏ä‡∏±‡∏î‡πÅ‡∏ö‡∏ö‡πÇ‡∏Ñ‡∏£‡∏ï‡πÅ‡∏ï‡∏Å!{/excited}
‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
‚Ä¢ {confident}Night Vision ‡∏ä‡∏±‡∏î‡πÅ‡∏°‡πâ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏∑‡∏î‡∏°‡∏¥‡∏î ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏°‡∏µ‡πÑ‡∏ü‡πÄ‡∏õ‡∏¥‡∏î{/confident}
‚Ä¢ ‡∏Å‡∏±‡∏ô‡∏ô‡πâ‡∏≥ IP65 ‡∏ù‡∏ô‡∏ï‡∏Å‡∏•‡∏≤‡∏¢‡∏ü‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏Å‡πá‡πÑ‡∏°‡πà‡∏Å‡∏•‡∏±‡∏ß!

{urgent}üî• Flash Sale ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô! ‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏© 25% ‡∏à‡∏≤‡∏Å 3,999 ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏û‡∏µ‡∏¢‡∏á 2,999 ‡∏ö‡∏≤‡∏ó ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏°‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤ 500 ‡∏ö‡∏≤‡∏ó!{/urgent}

{excited}‡∏£‡∏µ‡∏ö‡∏™‡∏±‡πà‡∏á‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö! ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏¢‡∏≠‡∏∞‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏±‡πà‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏î‡∏≤‡∏¢‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô! üõí{/excited}""",
                "script_type": ScriptType.AI_GENERATED,
                "target_emotion": "excited",
                "call_to_action": "‡∏™‡∏±‡πà‡∏á‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö! ‡πÑ‡∏°‡πà‡∏™‡∏±‡πà‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏î‡∏≤‡∏¢! üõí",
                "duration_estimate": 75
            }
        ]
        sample_scripts.extend(camera_scripts)
    
    # Script for Wireless Earbuds
    if len(products) > 1:
        earbuds_scripts = [
            {
                "product_id": products[1].id,
                "persona_id": personas[1].id if len(personas) > 1 else personas[0].id,
                "title": "Wireless Earbuds - Professional Review",
                "content": """{professional}‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏π‡πà‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©{/professional}

{confident}‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ç‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ Wireless Earbuds Elite Pro ‡∏´‡∏π‡∏ü‡∏±‡∏á‡πÑ‡∏£‡πâ‡∏™‡∏≤‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö Premium ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏ü‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì{/confident}

üéµ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡πÇ‡∏î‡∏î‡πÄ‡∏î‡πà‡∏ô:
‚Ä¢ {trustworthy}Active Noise Cancelling ‡∏ï‡∏±‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡πÑ‡∏î‡πâ 95%{/trustworthy}
‚Ä¢ ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏µ‡∏¢‡∏á Hi-Fi ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏™‡∏ï‡∏π‡∏î‡∏¥‡πÇ‡∏≠‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û
‚Ä¢ ‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ô‡∏≤‡∏ô 8+24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô
‚Ä¢ {professional}‡∏Å‡∏±‡∏ô‡∏ô‡πâ‡∏≥ IPX7 ‡πÉ‡∏™‡πà‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à{/professional}

{confident}‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏ö‡∏™‡∏´‡∏ô‡∏±‡∏Å treble ‡πÉ‡∏™ ‡πÑ‡∏°‡πà‡∏ö‡∏¥‡∏î‡πÄ‡∏ö‡∏∑‡∏≠‡∏ô ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡πÅ‡∏ô‡∏ß‡πÄ‡∏û‡∏•‡∏á{/confident}

üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©: ‡∏à‡∏≤‡∏Å 2,299 ‡∏ö‡∏≤‡∏ó ‡∏•‡∏î‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 1,599 ‡∏ö‡∏≤‡∏ó ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î 700 ‡∏ö‡∏≤‡∏ó ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Ñ‡∏™‡∏´‡∏ô‡∏±‡∏á Premium ‡∏ü‡∏£‡∏µ!

{professional}‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏≤‡∏Å‡∏•{/professional}""",
                "script_type": ScriptType.AI_GENERATED,
                "target_emotion": "professional",
                "call_to_action": "‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏≤‡∏Å‡∏•",
                "duration_estimate": 85
            }
        ]
        sample_scripts.extend(earbuds_scripts)
    
    # Script for Smart Home Hub  
    if len(products) > 2:
        hub_scripts = [
            {
                "product_id": products[2].id,
                "persona_id": personas[2].id if len(personas) > 2 else personas[0].id,
                "title": "Smart Home Hub - Friendly Recommendation",
                "content": """{friendly}‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÜ ‡∏°‡∏≤‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡∏≠‡∏µ‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö üòä{/friendly}

{warm}‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏≤‡∏Å‡πÅ‡∏ä‡∏£‡πå‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏ö‡πâ‡∏≤‡∏ô‡∏ú‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢ Smart Home Hub Central ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á‡πÜ{/warm}

{honest}‡∏ö‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ï‡∏≠‡∏ô‡πÅ‡∏£‡∏Å‡∏Å‡πá‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏î‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ô‡∏±‡πâ‡∏ô ‡πÅ‡∏ï‡πà‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏î‡∏π‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏¥‡∏î‡πÉ‡∏à‡πÄ‡∏•‡∏¢!{/honest}

‚ú® ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏°‡∏ä‡∏≠‡∏ö‡∏°‡∏≤‡∏Å‡πÜ:
‚Ä¢ ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÑ‡∏ü ‡πÅ‡∏≠‡∏£‡πå ‡∏ó‡∏µ‡∏ß‡∏µ ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î "‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏ô" ‡∏Å‡πá‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏•‡∏¢
‚Ä¢ {caring}‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÑ‡∏ü‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÜ{/caring}
‚Ä¢ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏á‡πà‡∏≤‡∏¢ 10 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ä‡πà‡∏≤‡∏á
‚Ä¢ {warm}‡∏•‡∏π‡∏Å‡πÜ ‡∏Å‡πá‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ñ‡∏∏‡∏°‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢{/warm}

üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤ 3,999 ‡∏ö‡∏≤‡∏ó ‡∏Ñ‡∏∏‡πâ‡∏°‡∏°‡∏≤‡∏Å‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô Smart Home ‡πÄ‡∏ï‡πá‡∏°‡πÜ

{friendly}‡∏•‡∏≠‡∏á‡∏î‡∏π‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÅ‡∏ñ‡∏°‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü‡∏î‡πâ‡∏ß‡∏¢ üòä{/friendly}""",
                "script_type": ScriptType.AI_GENERATED,
                "target_emotion": "friendly",
                "call_to_action": "‡∏•‡∏≠‡∏á‡∏î‡∏π‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÜ üòä",
                "duration_estimate": 70
            }
        ]
        sample_scripts.extend(hub_scripts)
    
    # Save scripts to database
    for script_data in sample_scripts:
        script = Script(**script_data)
        db.add(script)
    
    print(f"‚úÖ Created {len(sample_scripts)} sample scripts with emotional markup")

def display_summary(db: Session):
    """Display database summary"""
    print("\n" + "=" * 60)
    print("üìä Database Summary:")
    print("=" * 60)
    
    # Count records
    user_count = db.query(User).count()
    product_count = db.query(Product).count()
    script_count = db.query(Script).count()
    script_persona_count = db.query(ScriptPersona).count()
    voice_persona_count = db.query(VoicePersona).count()
    
    print(f"üë• Users: {user_count}")
    print(f"üì¶ Products: {product_count}")
    print(f"üìù Scripts: {script_count}")
    print(f"üé≠ Script Personas: {script_persona_count}")
    print(f"üéµ Voice Personas: {voice_persona_count}")
    
    # Product details
    active_products = db.query(Product).filter(Product.status == ProductStatus.ACTIVE).count()
    print(f"‚úÖ Active Products: {active_products}")
    
    # Featured products
    featured_products = db.query(Product).filter(Product.discount_percentage > 0).count()
    print(f"‚≠ê Featured Products (On Sale): {featured_products}")
    
    # Total stock
    total_stock = db.query(func.sum(Product.stock_quantity)).scalar() or 0
    print(f"üì¶ Total Stock: {total_stock} units")
    
    print("\nüéâ Database initialization completed successfully!")
    print("üöÄ You can now start the server with: python run_server.py")
    print("üì± Dashboard: http://localhost:8000")
    print("üìö API Docs: http://localhost:8000/docs")

def reset_database():
    """Reset database (delete all data)"""
    print("‚ö†Ô∏è DANGER: This will delete ALL data in the database!")
    confirm = input("Type 'RESET' to confirm: ")
    
    if confirm != "RESET":
        print("‚ùå Reset cancelled")
        return False
    
    try:
        print("üóÑÔ∏è Resetting database...")
        
        # Drop all tables
        from app.models.base import Base
        Base.metadata.drop_all(bind=engine)
        print("‚úÖ All tables dropped")
        
        # Recreate tables
        Base.metadata.create_all(bind=engine)
        print("‚úÖ Tables recreated")
        
        print("‚úÖ Database reset completed!")
        return True
        
    except Exception as e:
        print(f"‚ùå Database reset failed: {e}")
        return False

def test_connection():
    """Test database connection"""
    try:
        print("üîç Testing database connection...")
        
        db = SessionLocal()
        
        # Test query
        result = db.execute(text("SELECT 1")).fetchone()
        
        if result:
            print("‚úÖ Database connection successful!")
            
            # Show table info
            tables = db.execute(text("""
                SELECT name FROM sqlite_master 
                WHERE type='table' AND name NOT LIKE 'sqlite_%'
            """)).fetchall()
            
            print(f"üìã Found {len(tables)} tables:")
            for table in tables:
                count = db.execute(text(f"SELECT COUNT(*) FROM {table[0]}")).scalar()
                print(f"   ‚Ä¢ {table[0]}: {count} records")
        
        db.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Database connection failed: {e}")
        return False

def init_database():
    """Initialize database with tables and sample data"""
    print("üóÑÔ∏è Initializing AI Live Commerce Database...")
    print("=" * 60)
    
    try:
        # Create all tables
        print("üìã Creating database tables...")
        create_tables()
        print("‚úÖ Database tables created successfully!")
        
        # Create session
        db = SessionLocal()
        
        try:
            # Create sample data
            create_sample_personas(db)
            create_sample_products(db)
            create_sample_user(db)
            create_sample_scripts(db)
            
            db.commit()
            print("‚úÖ All sample data created successfully!")
            
            # Display summary
            display_summary(db)
            
        except Exception as e:
            print(f"‚ùå Error creating sample data: {e}")
            db.rollback()
            raise
        finally:
            db.close()
            
    except Exception as e:
        print(f"‚ùå Database initialization failed: {e}")
        return False
    
    return True 

def main():
    """Main function"""
    if len(sys.argv) < 2:
        print("üöÄ AI Live Commerce Platform - Database Management")
        print("=" * 60)
        print("Available commands:")
        print("  python main_dashboard_init.py initdb    - Initialize database with sample data")
        print("  python main_dashboard_init.py reset     - Reset database (delete all data)")
        print("  python main_dashboard_init.py test      - Test database connection")
        print("  python main_dashboard_init.py stats     - Show database statistics")
        print("  python main_dashboard_init.py backup    - Backup database")
        print("=" * 60)
        return
    
    command = sys.argv[1].lower()
    
    if command == "initdb":
        success = init_database()
        if success:
            print("\nüéâ Database initialization completed successfully!")
            print("üöÄ Next steps:")
            print("   1. Run: python run_server.py")
            print("   2. Visit: http://localhost:8000")
            print("   3. Login: demo@example.com / demo123")
        else:
            print("\n‚ùå Database initialization failed!")
            sys.exit(1)
            
    elif command == "reset":
        success = reset_database()
        if success:
            print("\nüéâ Database reset completed!")
            print("üí° Run 'python main_dashboard_init.py initdb' to recreate sample data")
        else:
            sys.exit(1)
            
    elif command == "test":
        success = test_connection()
        if not success:
            sys.exit(1)
            
    elif command == "stats":
        show_stats()
        
    elif command == "backup":
        backup_database()
        
    elif command == "createsuperuser":
        create_superuser()
        
    else:
        print(f"‚ùå Unknown command: {command}")
        print("Run without arguments to see available commands")
        sys.exit(1)

def show_stats():
    """Show database statistics"""
    try:
        print("üìä Database Statistics")
        print("=" * 40)
        
        db = SessionLocal()
        
        # Basic counts
        user_count = db.query(User).count()
        product_count = db.query(Product).count()
        script_count = db.query(Script).count()
        mp3_count = db.query(MP3File).count() if 'MP3File' in globals() else 0
        script_persona_count = db.query(ScriptPersona).count()
        voice_persona_count = db.query(VoicePersona).count()
        
        print(f"üë• Users: {user_count}")
        print(f"üì¶ Products: {product_count}")
        print(f"üìù Scripts: {script_count}")
        print(f"üéµ MP3 Files: {mp3_count}")
        print(f"üé≠ Script Personas: {script_persona_count}")
        print(f"üé§ Voice Personas: {voice_persona_count}")
        
        if product_count > 0:
            print("\nüì¶ Product Breakdown:")
            active_products = db.query(Product).filter(Product.status == ProductStatus.ACTIVE).count()
            on_sale_products = db.query(Product).filter(Product.discount_percentage > 0).count()
            total_stock = db.query(func.sum(Product.stock_quantity)).scalar() or 0
            
            print(f"   ‚úÖ Active: {active_products}")
            print(f"   üî• On Sale: {on_sale_products}")
            print(f"   üì¶ Total Stock: {total_stock} units")
        
        if script_count > 0:
            print("\nüìù Script Breakdown:")
            ai_scripts = db.query(Script).filter(Script.script_type == ScriptType.AI_GENERATED).count()
            manual_scripts = db.query(Script).filter(Script.script_type == ScriptType.MANUAL).count()
            scripts_with_mp3 = db.query(Script).filter(Script.has_mp3 == True).count()
            
            print(f"   ü§ñ AI Generated: {ai_scripts}")
            print(f"   ‚úèÔ∏è Manual: {manual_scripts}")
            print(f"   üéµ With MP3: {scripts_with_mp3}")
        
        # Database file size
        db_path = "ai_live_commerce.db"
        if os.path.exists(db_path):
            size_bytes = os.path.getsize(db_path)
            size_mb = size_bytes / 1024 / 1024
            print(f"\nüíæ Database Size: {size_mb:.2f} MB")
        
        db.close()
        
    except Exception as e:
        print(f"‚ùå Error getting statistics: {e}")

def backup_database():
    """Backup database"""
    try:
        import shutil
        from datetime import datetime
        
        source = "ai_live_commerce.db"
        if not os.path.exists(source):
            print("‚ùå Database file not found")
            return
        
        # Create backup filename with timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_name = f"ai_live_commerce_backup_{timestamp}.db"
        
        # Create backups directory
        os.makedirs("backups", exist_ok=True)
        backup_path = f"backups/{backup_name}"
        
        # Copy database
        shutil.copy2(source, backup_path)
        
        # Get file sizes
        source_size = os.path.getsize(source) / 1024 / 1024
        backup_size = os.path.getsize(backup_path) / 1024 / 1024
        
        print(f"‚úÖ Database backed up successfully!")
        print(f"üìÇ Source: {source} ({source_size:.2f} MB)")
        print(f"üíæ Backup: {backup_path} ({backup_size:.2f} MB)")
        
    except Exception as e:
        print(f"‚ùå Backup failed: {e}")

def create_superuser():
    """Create superuser account"""
    try:
        print("üë§ Create Superuser Account")
        print("=" * 30)
        
        email = input("Email: ").strip()
        if not email:
            print("‚ùå Email is required")
            return
        
        username = input("Username: ").strip()
        if not username:
            print("‚ùå Username is required")
            return
        
        password = input("Password: ").strip()
        if not password:
            print("‚ùå Password is required")
            return
        
        full_name = input("Full Name (optional): ").strip()
        
        db = SessionLocal()
        
        # Check if user exists
        existing = db.query(User).filter(
            (User.email == email) | (User.username == username)
        ).first()
        
        if existing:
            print("‚ùå User with this email or username already exists")
            db.close()
            return
        
        # Create superuser
        superuser = User(
            email=email,
            username=username,
            hashed_password=SecurityManager.get_password_hash(password),
            full_name=full_name or username,
            is_active=True,
            is_superuser=True,
            preferences={"role": "admin"}
        )
        
        db.add(superuser)
        db.commit()
        db.close()
        
        print("‚úÖ Superuser created successfully!")
        print(f"üìß Email: {email}")
        print(f"üë§ Username: {username}")
        print("üîë You can now login with these credentials")
        
    except Exception as e:
        print(f"‚ùå Error creating superuser: {e}")

if __name__ == "__main__":
    main()#!/usr/bin/env python3
"""
Database Initialization for AI Live Commerce Platform
Creates tables, sample data, and default personas
"""

import sys
import os
from pathlib import Path
from sqlalchemy.orm import Session
from sqlalchemy import text
import json

# Add app directory to path
sys.path.append(str(Path(__file__).parent))

from app.core.database import engine, SessionLocal, create_tables
from app.models.product import Product, ProductStatus
from app.models.script import Script, ScriptPersona, VoicePersona, ScriptType, GenderType
from app.models.user import User
from app.core.security import SecurityManager

def init_database():
    """Initialize database with tables and sample data"""
    print("üóÑÔ∏è Initializing AI Live Commerce Database...")
    print("=" * 60)
    
    try:
        # Create all tables
        print("üìã Creating database tables...")
        create_tables()
        print("‚úÖ Database tables created successfully!")
        
        # Create session
        db = SessionLocal()
        
        try:
            # Create sample data
            create_sample_personas(db)
            create_sample_products(db)
            create_sample_user(db)
            create_sample_scripts(db)
            
            db.commit()
            print("‚úÖ All sample data created successfully!")
            
            # Display summary
            display_summary(db)
            
        except Exception as e:
            print(f"‚ùå Error creating sample data: {e}")
            db.rollback()
            raise
        finally:
            db.close()
            
    except Exception as e:
        print(f"‚ùå Database initialization failed: {e}")
        return False
    
    return True

def create_sample_personas(db: Session):
    """Create default script and voice personas"""
    print("\nüë§ Creating sample personas...")
    
    # Script Personas
    script_personas = [
        {
            "name": "Energetic Seller",
            "description": "‡πÄ‡∏ã‡∏•‡∏™‡πå‡∏°‡∏±‡∏ô‡∏™‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏£‡∏∞‡∏ï‡∏∑‡∏≠‡∏£‡∏∑‡∏≠‡∏£‡πâ‡∏ô‡∏™‡∏π‡∏á ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô",
            "personality_traits": ["enthusiastic", "confident", "persuasive", "energetic", "positive"],
            "speaking_style": "‡∏û‡∏π‡∏î‡πÄ‡∏£‡πá‡∏ß ‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏•‡∏±‡∏á ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô",
            "target_audience": "‡∏ß‡∏±‡∏¢‡∏£‡∏∏‡πà‡∏ô ‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏ö‡∏ö impulse buy ‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡∏∏‡∏Å",
            "system_prompt": """‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ã‡∏•‡∏™‡πå‡∏°‡∏±‡∏ô‡∏™‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏£‡∏∞‡∏ï‡∏∑‡∏≠‡∏£‡∏∑‡∏≠‡∏£‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å ‡∏û‡∏π‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡πÄ‡∏ä‡πà‡∏ô '‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î', '‡πÄ‡∏à‡πã‡∏á‡∏°‡∏≤‡∏Å', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô‡∏Ç‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏Å‡∏ß‡πà‡∏≤', '‡∏£‡∏µ‡∏ö‡πÜ ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö' ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏ô‡∏∏‡∏Å‡∏™‡∏ô‡∏≤‡∏ô

‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå: ‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ï‡∏∑‡∏≠‡∏£‡∏∑‡∏≠‡∏£‡πâ‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£
‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î: ‡πÄ‡∏£‡πá‡∏ß ‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ä‡∏µ‡∏ß‡∏≤ ‡πÉ‡∏ä‡πâ‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏≠‡∏∏‡∏ó‡∏≤‡∏ô
‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏≤‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡∏ô‡∏ó‡∏µ""",
            "sample_phrases": [
                "‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î‡∏°‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö!", "‡πÄ‡∏à‡πã‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÄ‡∏•‡∏¢!", "‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô‡πÅ‡∏•‡πâ‡∏ß!", 
                "‡∏£‡∏µ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏¢‡∏≠‡∏∞‡πÅ‡∏•‡πâ‡∏ß!", "‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ!"
            ],
            "tone_guidelines": "‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á ‡πÄ‡∏£‡πá‡∏ß ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô",
            "do_say": ["‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î", "‡πÄ‡∏à‡πã‡∏á‡∏°‡∏≤‡∏Å", "‡∏£‡∏µ‡∏ö‡πÜ", "‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏≠‡∏á", "‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏°‡∏≤‡∏Å", "‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤", "‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏û‡∏•‡∏≤‡∏î"],
            "dont_say": ["‡∏≠‡∏≤‡∏à‡∏à‡∏∞", "‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à", "‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", "‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤", "‡∏ä‡πâ‡∏≤‡πÜ"],
            "default_emotion": "excited",
            "available_emotions": ["excited", "energetic", "happy", "confident", "urgent"],
            "sort_order": 1
        },
        {
            "name": "Professional Advisor",
            "description": "‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠",
            "personality_traits": ["knowledgeable", "trustworthy", "detailed", "patient", "reliable"],
            "speaking_style": "‡∏û‡∏π‡∏î‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠",
            "target_audience": "‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏±‡∏á ‡∏ô‡∏±‡∏Å‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à ‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô",
            "system_prompt": """‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠ ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥ ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç

‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå: ‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ‡∏™‡∏á‡∏ö ‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠
‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î: ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô
‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß‡πâ‡∏ß‡∏≤‡∏á‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ã‡∏∑‡πâ‡∏≠""",
            "sample_phrases": [
                "‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô", "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏î‡πÄ‡∏î‡πà‡∏ô", 
                "‡∏ú‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô", "‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"
            ],
            "tone_guidelines": "‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏á‡∏ö ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô",
            "do_say": ["‡∏Å‡∏≤‡∏£‡∏±‡∏ô‡∏ï‡∏µ", "‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û", "‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô", "‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå", "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ", "‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö"],
            "dont_say": ["‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏î‡∏µ", "‡∏•‡∏≠‡∏á‡∏î‡∏π", "‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ", "‡∏ó‡∏±‡πà‡∏ß‡πÜ ‡πÑ‡∏õ"],
            "default_emotion": "professional",
            "available_emotions": ["professional", "confident", "trustworthy", "calm"],
            "sort_order": 2
        },
        {
            "name": "Friendly Neighbor",
            "description": "‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡∏µ‡πÜ ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏à",
            "personality_traits": ["caring", "honest", "relatable", "helpful", "warm"],
            "speaking_style": "‡∏™‡∏ö‡∏≤‡∏¢‡πÜ ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡πÅ‡∏ä‡∏£‡πå‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß",
            "target_audience": "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß ‡πÅ‡∏°‡πà‡∏ö‡πâ‡∏≤‡∏ô ‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô",
            "system_prompt": """‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÅ‡∏ä‡∏£‡πå‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡∏µ‡πÜ ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏à ‡∏û‡∏π‡∏î‡πÅ‡∏ö‡∏ö‡∏™‡∏ö‡∏≤‡∏¢‡πÜ ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡πÅ‡∏ä‡∏£‡πå‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ‡πÄ‡∏•‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏ß‡πâ‡∏ß‡∏≤‡∏á‡πÉ‡∏à

‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå: ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£ ‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏à
‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î: ‡∏™‡∏ö‡∏≤‡∏¢‡πÜ ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏á‡πà‡∏≤‡∏¢‡πÜ
‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô""",
            "sample_phrases": [
                "‡∏ö‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏∞", "‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏î‡∏µ", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏£‡∏¥‡∏á‡πÜ", 
                "‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏á‡∏î‡∏µ‡∏°‡∏≤‡πÅ‡∏ä‡∏£‡πå", "‡∏•‡∏≠‡∏á‡∏î‡∏π‡∏ô‡∏∞ ‡∏Ñ‡∏∏‡πâ‡∏°‡∏à‡∏£‡∏¥‡∏á‡πÜ"
            ],
            "tone_guidelines": "‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏à",
            "do_say": ["‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", "‡πÅ‡∏ä‡∏£‡πå", "‡∏ö‡∏≠‡∏Å‡∏ï‡πà‡∏≠", "‡πÉ‡∏ä‡πâ‡∏î‡∏µ", "‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤", "‡∏•‡∏≠‡∏á‡∏î‡∏π"],
            "dont_say": ["‡∏ï‡πâ‡∏≠‡∏á‡∏ã‡∏∑‡πâ‡∏≠", "‡∏£‡∏µ‡∏ö‡πÜ", "‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö"],
            "default_emotion": "friendly",
            "available_emotions": ["friendly", "warm", "caring", "honest"],
            "sort_order": 3
        }
    ]
    
    for persona_data in script_personas:
        persona = ScriptPersona(**persona_data)