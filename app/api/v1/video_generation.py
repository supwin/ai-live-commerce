# app/api/v1/video_generation.py
"""
Video Generation API Endpoints
‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏≤‡∏Å AI scripts
"""

import asyncio
import os
from pathlib import Path
from typing import Optional, List
from fastapi import APIRouter, Depends, HTTPException, BackgroundTasks
from pydantic import BaseModel
from sqlalchemy.orm import Session

from app.core.database import get_db
from app.services.ai_video_service import ai_video_service
from app.services.ai_script_service import ai_script_service
from app.models.product import Product
from app.models.script import Script

router = APIRouter(prefix="/video-generation", tags=["Video Generation"])

# Request Models
class VideoGenerationRequest(BaseModel):
    product_id: int
    script_id: Optional[int] = None  # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á script ‡πÉ‡∏´‡∏°‡πà
    video_style: str = "slideshow"  # slideshow, animated_text, product_showcase
    include_audio: bool = True
    persona_id: Optional[int] = None  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á script ‡πÉ‡∏´‡∏°‡πà

class BatchVideoRequest(BaseModel):
    product_ids: List[int]
    video_style: str = "slideshow"
    include_audio: bool = True
    persona_id: Optional[int] = 1  # Default persona

class VideoUpdateRequest(BaseModel):
    video_id: str
    product_info: Optional[dict] = None

# Response Models
class VideoGenerationResponse(BaseModel):
    success: bool
    video_id: Optional[str] = None
    video_path: Optional[str] = None
    duration: Optional[float] = None
    format: Optional[str] = None
    resolution: Optional[str] = None
    has_audio: bool = False
    error: Optional[str] = None

@router.get("/status")
async def get_video_service_status():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Video Service"""
    
    try:
        status = ai_video_service.get_service_status()
        return {
            "success": True,
            "service_status": status,
            "ready_for_production": status["capabilities"]["video_generation"],
            "recommendations": [
                "‚úÖ Service ready for video generation" if status["capabilities"]["video_generation"] else
                "üì¶ Install MoviePy and PIL for full video generation: pip install moviepy pillow",
                "üé¨ Supports TikTok format (9:16 aspect ratio)",
                "üîä TTS audio integration available",
                "üé® Multiple video styles available"
            ]
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }

@router.post("/generate", response_model=VideoGenerationResponse)
async def generate_product_video(
    request: VideoGenerationRequest,
    background_tasks: BackgroundTasks,
    db: Session = Depends(get_db)
):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å AI script
    
    Flow:
    1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    2. ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏î‡∏∂‡∏á AI script
    3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
    4. ‡πÄ‡∏û‡∏¥‡πà‡∏° TTS audio (‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    """
    
    try:
        print(f"üé¨ Video generation request for product {request.product_id}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        product = db.query(Product).filter(Product.id == request.product_id).first()
        if not product:
            raise HTTPException(status_code=404, detail=f"Product {request.product_id} not found")
        
        print(f"   üì¶ Product: {product.name}")
        
        # ‡∏î‡∏∂‡∏á/‡∏™‡∏£‡πâ‡∏≤‡∏á script
        if request.script_id:
            # ‡πÉ‡∏ä‡πâ script ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            script_obj = db.query(Script).filter(Script.id == request.script_id).first()
            if not script_obj:
                raise HTTPException(status_code=404, detail=f"Script {request.script_id} not found")
            
            script_data = {
                "title": script_obj.title,
                "content": script_obj.content,
                "call_to_action": script_obj.call_to_action,
                "target_emotion": script_obj.target_emotion
            }
            print(f"   üìù Using existing script: {script_obj.title}")
            
        else:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á script ‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ AI
            if not ai_script_service:
                raise HTTPException(status_code=503, detail="AI Script Service not available")
            
            if not request.persona_id:
                raise HTTPException(status_code=400, detail="persona_id required for new script generation")
            
            print(f"   ü§ñ Generating new AI script with persona {request.persona_id}")
            
            scripts = await ai_script_service.generate_scripts(
                db=db,
                product_id=request.product_id,
                persona_id=request.persona_id,
                count=1
            )
            
            if not scripts:
                raise HTTPException(status_code=500, detail="Failed to generate AI script")
            
            script_data = scripts[0]
            print(f"   ‚úÖ Generated script: {script_data.get('title', 'Untitled')}")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÉ‡∏ô background
        background_tasks.add_task(
            generate_video_task,
            request.product_id,
            script_data,
            request.video_style,
            request.include_audio,
            db
        )
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á video ID ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
        import time
        video_id = f"product_{request.product_id}_{int(time.time() * 1000)}"
        
        return VideoGenerationResponse(
            success=True,
            video_id=video_id,
            video_path=f"/uploads/videos/{video_id}.mp4",
            format="mp4",
            resolution="1080x1920",
            has_audio=request.include_audio,
        )
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Video generation request failed: {str(e)}")
        return VideoGenerationResponse(
            success=False,
            error=str(e)
        )

async def generate_video_task(
    product_id: int,
    script_data: dict,
    video_style: str,
    include_audio: bool,
    db: Session
):
    """Background task ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠"""
    
    try:
        print(f"üé¨ Starting background video generation for product {product_id}")
        
        result = await ai_video_service.generate_product_video(
            product_id=product_id,
            script=script_data,
            db=db,
            video_style=video_style,
            include_audio=include_audio
        )
        
        if result.get("success"):
            print(f"‚úÖ Background video generation completed: {result.get('video_path')}")
        else:
            print(f"‚ùå Background video generation failed: {result.get('error')}")
            
    except Exception as e:
        print(f"‚ùå Background video generation error: {str(e)}")

@router.post("/generate-batch")
async def generate_batch_videos(
    request: BatchVideoRequest,
    background_tasks: BackgroundTasks,
    db: Session = Depends(get_db)
):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô"""
    
    try:
        print(f"üé¨ Batch video generation for {len(request.product_ids)} products")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        products = db.query(Product).filter(Product.id.in_(request.product_ids)).all()
        found_ids = [p.id for p in products]
        missing_ids = [pid for pid in request.product_ids if pid not in found_ids]
        
        if missing_ids:
            raise HTTPException(
                status_code=404,
                detail=f"Products not found: {missing_ids}"
            )
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° batch generation
        video_jobs = []
        for product_id in request.product_ids:
            video_id = f"batch_{product_id}_{int(time.time() * 1000)}"
            
            background_tasks.add_task(
                generate_batch_video_task,
                product_id,
                request.video_style,
                request.include_audio,
                request.persona_id,
                video_id,
                db
            )
            
            video_jobs.append({
                "product_id": product_id,
                "video_id": video_id,
                "status": "queued"
            })
        
        return {
            "success": True,
            "message": f"Batch video generation started for {len(products)} products",
            "jobs": video_jobs,
            "estimated_completion": f"{len(products) * 2} minutes",
            "monitor_endpoint": "/api/v1/video-generation/batch-status"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Batch video generation failed: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

async def generate_batch_video_task(
    product_id: int,
    video_style: str,
    include_audio: bool,
    persona_id: int,
    video_id: str,
    db: Session
):
    """Background task ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö batch video generation"""
    
    try:
        print(f"üé¨ Batch: Generating video for product {product_id}")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á AI script
        if ai_script_service and persona_id:
            scripts = await ai_script_service.generate_scripts(
                db=db,
                product_id=product_id,
                persona_id=persona_id,
                count=1
            )
            script_data = scripts[0] if scripts else {"content": "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤"}
        else:
            script_data = {"content": "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤"}
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
        result = await ai_video_service.generate_product_video(
            product_id=product_id,
            script=script_data,
            db=db,
            video_style=video_style,
            include_audio=include_audio
        )
        
        print(f"{'‚úÖ' if result.get('success') else '‚ùå'} Batch video for product {product_id}: {result.get('video_path', 'Failed')}")
        
    except Exception as e:
        print(f"‚ùå Batch video generation error for product {product_id}: {str(e)}")

@router.get("/video/{video_id}/status")
async def get_video_status(video_id: str):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠"""
    
    try:
        status = await ai_video_service.get_video_status(video_id)
        return {
            "success": True,
            "video_status": status
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }

@router.get("/styles")
async def get_available_video_styles():
    """‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ video styles ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
    
    return {
        "success": True,
        "video_styles": [
            {
                "id": "slideshow",
                "name": "Slideshow",
                "description": "‡∏™‡πÑ‡∏•‡∏î‡πå‡∏†‡∏≤‡∏û‡∏ô‡∏¥‡πà‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
                "duration": "15-25 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ",
                "features": ["Title slide", "Product info", "Features", "Call to action"]
            },
            {
                "id": "animated_text",
                "name": "Animated Text",
                "description": "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö content ‡∏ó‡∏µ‡πà‡πÄ‡∏ô‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",
                "duration": "20-30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ",
                "features": ["Text animation", "Fade effects", "Dynamic content"]
            },
            {
                "id": "product_showcase",
                "name": "Product Showcase",
                "description": "‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏° highlight ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û",
                "duration": "25-35 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ",
                "features": ["Product images", "Feature highlights", "Price emphasis", "Professional layout"]
            }
        ],
        "recommended": {
            "new_products": "product_showcase",
            "text_heavy": "animated_text",
            "general_purpose": "slideshow"
        }
    }

@router.post("/test-generation")
async def test_video_generation(
    background_tasks: BackgroundTasks,
    db: Session = Depends(get_db)
):
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mock"""
    
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mock
        mock_script = {
            "title": "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ AI",
            "content": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡∏µ‡πÜ ‡∏°‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÜ ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏¢‡πà‡∏≠‡∏°‡πÄ‡∏¢‡∏≤ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö",
            "call_to_action": "‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏±‡∏á‡πÄ‡∏•‡πÄ‡∏•‡∏¢!",
            "target_emotion": "friendly"
        }
        
        # ‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mock
        product = db.query(Product).first()
        if not product:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á mock product data
            mock_product_data = {
                "id": 999,
                "name": "‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI Video",
                "price": 299.00,
                "description": "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ AI",
                "key_features": ["‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î", "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢", "‡∏™‡πà‡∏á‡∏ü‡∏£‡∏µ"]
            }
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mock
            result = await ai_video_service.generate_product_video(
                product_id=999,
                script=mock_script,
                db=db,
                video_style="slideshow",
                include_audio=True
            )
            
            return {
                "success": True,
                "message": "Test video generation completed",
                "result": result,
                "note": "Generated with mock product data",
                "mock_product": mock_product_data
            }
        else:
            # ‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏£‡∏¥‡∏á
            background_tasks.add_task(
                test_video_task,
                product.id,
                mock_script,
                db
            )
            
            return {
                "success": True,
                "message": "Test video generation started",
                "product": {
                    "id": product.id,
                    "name": product.name
                },
                "script": mock_script,
                "note": "Video generation running in background"
            }
            
    except Exception as e:
        print(f"‚ùå Test video generation failed: {str(e)}")
        return {
            "success": False,
            "error": str(e)
        }

@router.get("/list-videos")
async def list_videos():
    """List all generated videos"""
    try:
        video_dir = Path("frontend/uploads/videos")
        if not video_dir.exists():
            return {"videos": [], "count": 0}
        
        videos = []
        for video_file in video_dir.glob("*.mp4"):
            stat = video_file.stat()
            videos.append({
                "filename": video_file.name,
                "path": f"/uploads/videos/{video_file.name}",
                "size_mb": round(stat.st_size / (1024*1024), 2),
                "created": datetime.fromtimestamp(stat.st_ctime).isoformat(),
                "duration": "Unknown"  # ‡πÄ‡∏û‡∏¥‡πà‡∏° video duration detection ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
            })
        
        videos.sort(key=lambda x: x["created"], reverse=True)
        return {"videos": videos, "count": len(videos)}
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to list videos: {str(e)}")

@router.delete("/delete-video/{filename}")
async def delete_video(filename: str):
    """Delete a video file"""
    try:
        video_path = Path(f"frontend/uploads/videos/{filename}")
        if not video_path.exists():
            raise HTTPException(status_code=404, detail="Video not found")
        
        if not filename.endswith('.mp4'):
            raise HTTPException(status_code=400, detail="Invalid file type")
        
        video_path.unlink()
        return {"message": f"Video {filename} deleted successfully"}
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to delete video: {str(e)}")

@router.post("/play-video/{filename}")
async def play_video(filename: str):
    """Play video on display server"""
    try:
        video_path = Path(f"frontend/uploads/videos/{filename}")
        if not video_path.exists():
            raise HTTPException(status_code=404, detail="Video not found")
        
        # Update content display with video
        from app.services.content_display_service import content_display_service
        
        await content_display_service.update_content({
            "type": "video",
            "video_path": f"/uploads/videos/{filename}",
            "title": filename.replace('.mp4', '').replace('_', ' ').title(),
            "status": "playing"
        })
        
        return {"message": f"Playing video: {filename}", "video_path": f"/uploads/videos/{filename}"}
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to play video: {str(e)}")


async def test_video_task(product_id: int, mock_script: dict, db: Session):
    """Background task ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    
    try:
        result = await ai_video_service.generate_product_video(
            product_id=product_id,
            script=mock_script,
            db=db,
            video_style="slideshow",
            include_audio=True
        )
        
        print(f"üß™ Test video generation result: {result}")
        
    except Exception as e:
        print(f"‚ùå Test video generation error: {str(e)}")

@router.get("/recent-videos")
async def get_recent_videos():
    """‡∏î‡∏π‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
    
    try:
        video_dir = ai_video_service.video_dir
        video_files = []
        
        if video_dir.exists():
            for file_path in video_dir.glob("*.mp4"):
                file_stat = file_path.stat()
                video_files.append({
                    "filename": file_path.name,
                    "path": str(file_path),
                    "size_mb": round(file_stat.st_size / (1024 * 1024), 2),
                    "created_at": datetime.fromtimestamp(file_stat.st_ctime).isoformat(),
                    "url": f"/uploads/videos/{file_path.name}"
                })
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            video_files.sort(key=lambda x: x["created_at"], reverse=True)
        
        return {
            "success": True,
            "videos": video_files[:10],  # ‡πÅ‡∏™‡∏î‡∏á 10 ‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            "total_videos": len(video_files),
            "video_directory": str(video_dir)
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }

@router.delete("/video/{video_id}")
async def delete_video(video_id: str):
    """‡∏•‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠"""
    
    try:
        video_dir = ai_video_service.video_dir
        deleted_files = []
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö video_id
        for file_path in video_dir.glob(f"{video_id}*"):
            file_path.unlink()
            deleted_files.append(str(file_path))
        
        if deleted_files:
            return {
                "success": True,
                "message": f"Deleted {len(deleted_files)} files",
                "deleted_files": deleted_files
            }
        else:
            return {
                "success": False,
                "message": "No files found to delete",
                "video_id": video_id
            }
            
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }