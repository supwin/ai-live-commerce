# app/api/v1/avatar.py
"""
Avatar API endpoints for Live2D control
"""

from fastapi import APIRouter, WebSocket, WebSocketDisconnect, HTTPException
from pydantic import BaseModel
from typing import Optional, Dict, Any, List
import asyncio
import json

# Import avatar service (create this after)
from app.services.avatar_service import (
    avatar_controller,
    AvatarEmotion,
    AvatarGesture
)

router = APIRouter(prefix="/api/avatar", tags=["avatar"])

# Request models
class SpeakRequest(BaseModel):
    text: str
    emotion: Optional[str] = None
    duration: Optional[float] = None
    voice: Optional[str] = "th-TH-PremwadeeNeural"

class EmotionRequest(BaseModel):
    emotion: str

class GestureRequest(BaseModel):
    gesture: str
    duration: Optional[float] = 2.0

class ProductPresentRequest(BaseModel):
    product_name: str
    price: float
    description: Optional[str] = ""

# API Endpoints
@router.post("/speak")
async def avatar_speak(request: SpeakRequest):
    """Make avatar speak with lip sync"""
    try:
        # Generate TTS audio (mock for now)
        audio_url = None  # Will be generated by TTS service
        
        # Estimate duration based on text length
        duration = request.duration or (len(request.text) * 0.05 + 1.0)
        
        # Make avatar speak
        success = await avatar_controller.speak(
            text=request.text,
            audio_url=audio_url,
            duration=duration
        )
        
        return {
            "success": success,
            "text": request.text,
            "duration": duration,
            "audio_url": audio_url
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/emotion")
async def set_emotion(request: EmotionRequest):
    """Set avatar emotion"""
    try:
        emotion = AvatarEmotion(request.emotion)
        await avatar_controller.set_emotion(emotion)
        
        return {
            "success": True,
            "emotion": emotion.value
        }
        
    except ValueError:
        raise HTTPException(status_code=400, detail=f"Invalid emotion: {request.emotion}")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/gesture")
async def perform_gesture(request: GestureRequest):
    """Perform avatar gesture"""
    try:
        gesture = AvatarGesture(request.gesture)
        await avatar_controller.perform_gesture(gesture, request.duration)
        
        return {
            "success": True,
            "gesture": gesture.value,
            "duration": request.duration
        }
        
    except ValueError:
        raise HTTPException(status_code=400, detail=f"Invalid gesture: {request.gesture}")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/present_product")
async def present_product(request: ProductPresentRequest):
    """Special product presentation animation"""
    try:
        success = await avatar_controller.present_product(
            product_name=request.product_name,
            price=request.price
        )
        
        return {
            "success": success,
            "product": request.product_name,
            "price": request.price
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/state")
async def get_avatar_state():
    """Get current avatar state"""
    return avatar_controller.get_state()

@router.get("/emotions")
async def list_emotions():
    """List available emotions"""
    return {
        "emotions": [e.value for e in AvatarEmotion]
    }

@router.get("/gestures")
async def list_gestures():
    """List available gestures"""
    return {
        "gestures": [g.value for g in AvatarGesture]
    }

# WebSocket for real-time control
@router.websocket("/ws")
async def avatar_websocket(websocket: WebSocket):
    """WebSocket for real-time avatar control"""
    await websocket.accept()
    
    # Add client to controller
    avatar_controller.add_websocket_client(websocket)
    
    try:
        # Send initial state
        await websocket.send_json(avatar_controller.get_state())
        
        while True:
            # Receive commands
            data = await websocket.receive_json()
            
            # Process command
            command_type = data.get("type")
            
            if command_type == "set_emotion":
                emotion = AvatarEmotion(data.get("emotion", "neutral"))
                await avatar_controller.set_emotion(emotion)
                
            elif command_type == "perform_gesture":
                gesture = AvatarGesture(data.get("gesture", "idle"))
                duration = data.get("duration", 2.0)
                await avatar_controller.perform_gesture(gesture, duration)
                
            elif command_type == "speak":
                text = data.get("text", "")
                await avatar_controller.speak(text)
                
            elif command_type == "look_at":
                x = data.get("x", 0)
                y = data.get("y", 0)
                await avatar_controller.look_at(x, y)
                
            # Send response
            await websocket.send_json({
                "type": "command_received",
                "command": command_type,
                "status": "ok"
            })
            
    except WebSocketDisconnect:
        avatar_controller.remove_websocket_client(websocket)
    except Exception as e:
        print(f"WebSocket error: {e}")
        avatar_controller.remove_websocket_client(websocket)