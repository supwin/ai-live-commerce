# app/api/v1/endpoints/personas.py
"""
Persona Management Endpoints
‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Script Personas ‡πÅ‡∏•‡∏∞ Voice Personas
"""

from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from sqlalchemy import asc, desc
from typing import List, Optional

from ..dependencies import (
    get_db, ScriptPersona, VoicePersona,
    handle_database_error, SUPPORTED_TTS_PROVIDERS
)
from ..schemas import (
    ScriptPersonaCreateRequest, VoicePersonaCreateRequest,
    PersonaResponse, SuccessResponse
)

router = APIRouter()

# Script Persona Endpoints
@router.get("/personas/script")
async def get_script_personas(
    active_only: bool = Query(True, description="‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ personas ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ"),
    search: Optional[str] = Query(None, description="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢"),
    db: Session = Depends(get_db)
):
    """
    ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Script Personas
    
    Features:
    - ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° active status
    - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
    - ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° sort_order ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠
    """
    try:
        print("üîç DEBUG: Starting get_script_personas")
        query = db.query(ScriptPersona)
        
        if active_only:
            query = query.filter(ScriptPersona.is_active == True)
            
        if search:
            search_term = f"%{search}%"
            query = query.filter(
                (ScriptPersona.name.ilike(search_term)) |
                (ScriptPersona.description.ilike(search_term)) |
                (ScriptPersona.speaking_style.ilike(search_term))
            )
        
        personas = query.order_by(
            asc(getattr(ScriptPersona, 'sort_order', ScriptPersona.name)), 
            asc(ScriptPersona.name)
        ).all()
        
        result = []
        for persona in personas:
            persona_dict = persona.to_dict()
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            usage_count = getattr(persona, 'usage_count', 0)
            persona_dict['usage_count'] = usage_count
            
            result.append(persona_dict)
        
        print(f"‚úÖ Found {len(result)} script personas")
        return result
        
    except Exception as e:
        handle_database_error(e, "get_script_personas")

@router.post("/personas/script", response_model=PersonaResponse)
async def create_script_persona(
    request: ScriptPersonaCreateRequest, 
    db: Session = Depends(get_db)
):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á Script Persona ‡πÉ‡∏´‡∏°‡πà
    
    Features:
    - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥
    - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á system prompt
    """
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥
        existing = db.query(ScriptPersona).filter(ScriptPersona.name == request.name).first()
        if existing:
            raise HTTPException(
                status_code=400, 
                detail=f"Script persona name '{request.name}' already exists"
            )
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö system prompt
        if len(request.system_prompt) < 10:
            raise HTTPException(
                status_code=400,
                detail="System prompt must be at least 10 characters long"
            )
        
        persona_data = request.dict()
        persona_data['is_active'] = True
        persona_data['usage_count'] = 0
        
        persona = ScriptPersona(**persona_data)
        
        db.add(persona)
        db.commit()
        db.refresh(persona)
        
        print(f"‚úÖ Created script persona: {persona.name}")
        print(f"   üìù System prompt length: {len(request.system_prompt)} chars")
        print(f"   üé≠ Default emotion: {request.default_emotion}")
        
        return persona.to_dict()
        
    except HTTPException:
        db.rollback()
        raise
    except Exception as e:
        db.rollback()
        handle_database_error(e, "create_script_persona")

@router.get("/personas/script/{persona_id}")
async def get_script_persona(persona_id: int, db: Session = Depends(get_db)):
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Script Persona ‡∏ï‡∏≤‡∏° ID ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    """
    try:
        persona = db.query(ScriptPersona).filter(ScriptPersona.id == persona_id).first()
        if not persona:
            raise HTTPException(status_code=404, detail="Script persona not found")
        
        persona_dict = persona.to_dict()
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        from ..dependencies import Script
        scripts_generated = db.query(Script).filter(
            getattr(Script, 'persona_id', None) == persona_id
        ).count()
        
        persona_dict['scripts_generated'] = scripts_generated
        persona_dict['usage_count'] = getattr(persona, 'usage_count', 0)
        
        return persona_dict
        
    except HTTPException:
        raise
    except Exception as e:
        handle_database_error(e, "get_script_persona")

@router.put("/personas/script/{persona_id}")
async def update_script_persona(
    persona_id: int,
    request: ScriptPersonaCreateRequest,
    db: Session = Depends(get_db)
):
    """
    ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Script Persona
    """
    try:
        persona = db.query(ScriptPersona).filter(ScriptPersona.id == persona_id).first()
        if not persona:
            raise HTTPException(status_code=404, detail="Script persona not found")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥ (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
        if request.name != persona.name:
            existing = db.query(ScriptPersona).filter(
                ScriptPersona.name == request.name,
                ScriptPersona.id != persona_id
            ).first()
            if existing:
                raise HTTPException(
                    status_code=400,
                    detail=f"Script persona name '{request.name}' already exists"
                )
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        update_data = request.dict()
        for field, value in update_data.items():
            setattr(persona, field, value)
        
        db.commit()
        db.refresh(persona)
        
        print(f"‚úÖ Updated script persona: {persona.name}")
        
        return persona.to_dict()
        
    except HTTPException:
        db.rollback()
        raise
    except Exception as e:
        db.rollback()
        handle_database_error(e, "update_script_persona")

@router.delete("/personas/script/{persona_id}")
async def delete_script_persona(persona_id: int, db: Session = Depends(get_db)):
    """
    ‡∏•‡∏ö Script Persona (soft delete)
    """
    try:
        persona = db.query(ScriptPersona).filter(ScriptPersona.id == persona_id).first()
        if not persona:
            raise HTTPException(status_code=404, detail="Script persona not found")
        
        persona_name = persona.name
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        from ..dependencies import Script
        scripts_using = db.query(Script).filter(
            getattr(Script, 'persona_id', None) == persona_id
        ).count()
        
        if scripts_using > 0:
            # Soft delete - ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
            persona.is_active = False
            db.commit()
            
            return {
                "message": f"Script persona '{persona_name}' deactivated (used by {scripts_using} scripts)",
                "success": True,
                "action": "deactivated",
                "scripts_affected": scripts_using
            }
        else:
            # Hard delete - ‡∏•‡∏ö‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            db.delete(persona)
            db.commit()
            
            return {
                "message": f"Script persona '{persona_name}' deleted successfully",
                "success": True,
                "action": "deleted",
                "scripts_affected": 0
            }
        
    except HTTPException:
        db.rollback()
        raise
    except Exception as e:
        db.rollback()
        handle_database_error(e, "delete_script_persona")

# Voice Persona Endpoints
@router.get("/personas/voice")
async def get_voice_personas(
    active_only: bool = Query(True, description="‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ personas ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ"),
    provider: Optional[str] = Query(None, description="‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° TTS provider"),
    language: Optional[str] = Query(None, description="‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤"),
    gender: Optional[str] = Query(None, description="‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏û‡∏®‡πÄ‡∏™‡∏µ‡∏¢‡∏á"),
    db: Session = Depends(get_db)
):
    """
    ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Voice Personas ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á
    """
    try:
        print("üîç DEBUG: Starting get_voice_personas")
        query = db.query(VoicePersona)
        
        if active_only:
            query = query.filter(VoicePersona.is_active == True)
            
        if provider:
            if provider not in SUPPORTED_TTS_PROVIDERS:
                raise HTTPException(
                    status_code=400,
                    detail=f"Unsupported provider. Valid options: {SUPPORTED_TTS_PROVIDERS}"
                )
            query = query.filter(VoicePersona.tts_provider == provider)
            
        if language:
            query = query.filter(VoicePersona.language == language)
            
        if gender:
            query = query.filter(VoicePersona.gender == gender)
        
        personas = query.order_by(asc(VoicePersona.name)).all()
        
        result = []
        for i, persona in enumerate(personas):
            try:
                print(f"üîç DEBUG: Processing voice persona {i+1}: {persona.name}")
                persona_dict = persona.to_dict()
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                from ..dependencies import MP3File
                mp3s_generated = db.query(MP3File).filter(
                    MP3File.voice_persona_id == persona.id
                ).count()
                
                persona_dict['mp3s_generated'] = mp3s_generated
                persona_dict['usage_count'] = getattr(persona, 'usage_count', 0)
                
                result.append(persona_dict)
                print(f"‚úÖ DEBUG: Successfully processed voice persona {i+1}")
                
            except Exception as e:
                print(f"‚ùå DEBUG: Error processing voice persona {i+1} ({persona.name}): {e}")
                raise e
        
        print(f"‚úÖ Found {len(result)} voice personas")
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå ERROR in get_voice_personas: {str(e)}")
        handle_database_error(e, "get_voice_personas")

@router.post("/personas/voice", response_model=PersonaResponse)
async def create_voice_persona(
    request: VoicePersonaCreateRequest, 
    db: Session = Depends(get_db)
):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á Voice Persona ‡πÉ‡∏´‡∏°‡πà
    
    Features:
    - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥
    - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö TTS provider
    - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    """
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥
        existing = db.query(VoicePersona).filter(VoicePersona.name == request.name).first()
        if existing:
            raise HTTPException(
                status_code=400,
                detail=f"Voice persona name '{request.name}' already exists"
            )
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö TTS provider
        if request.tts_provider not in SUPPORTED_TTS_PROVIDERS:
            raise HTTPException(
                status_code=400,
                detail=f"Unsupported TTS provider. Valid options: {SUPPORTED_TTS_PROVIDERS}"
            )
        
        persona_data = request.dict()
        persona_data['is_active'] = True
        persona_data['usage_count'] = 0
        
        persona = VoicePersona(**persona_data)
        
        db.add(persona)
        db.commit()
        db.refresh(persona)
        
        print(f"‚úÖ Created voice persona: {persona.name}")
        print(f"   üó£Ô∏è Provider: {request.tts_provider}")
        print(f"   üéöÔ∏è Voice ID: {request.voice_id}")
        print(f"   üåç Language: {request.language}")
        
        return persona.to_dict()
        
    except HTTPException:
        db.rollback()
        raise
    except Exception as e:
        db.rollback()
        handle_database_error(e, "create_voice_persona")

@router.get("/personas/voice/{persona_id}")
async def get_voice_persona(persona_id: int, db: Session = Depends(get_db)):
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Voice Persona ‡∏ï‡∏≤‡∏° ID ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    """
    try:
        persona = db.query(VoicePersona).filter(VoicePersona.id == persona_id).first()
        if not persona:
            raise HTTPException(status_code=404, detail="Voice persona not found")
        
        persona_dict = persona.to_dict()
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        from ..dependencies import MP3File
        mp3s_generated = db.query(MP3File).filter(
            MP3File.voice_persona_id == persona_id
        ).count()
        
        recent_usage = db.query(MP3File).filter(
            MP3File.voice_persona_id == persona_id
        ).order_by(desc(MP3File.created_at)).limit(5).all()
        
        persona_dict.update({
            'mp3s_generated': mp3s_generated,
            'usage_count': getattr(persona, 'usage_count', 0),
            'recent_usage': [
                {
                    'script_id': mp3.script_id,
                    'filename': mp3.filename,
                    'created_at': mp3.created_at.isoformat() if mp3.created_at else None
                }
                for mp3 in recent_usage
            ]
        })
        
        return persona_dict
        
    except HTTPException:
        raise
    except Exception as e:
        handle_database_error(e, "get_voice_persona")

@router.put("/personas/voice/{persona_id}")
async def update_voice_persona(
    persona_id: int,
    request: VoicePersonaCreateRequest,
    db: Session = Depends(get_db)
):
    """
    ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Voice Persona
    """
    try:
        persona = db.query(VoicePersona).filter(VoicePersona.id == persona_id).first()
        if not persona:
            raise HTTPException(status_code=404, detail="Voice persona not found")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥ (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
        if request.name != persona.name:
            existing = db.query(VoicePersona).filter(
                VoicePersona.name == request.name,
                VoicePersona.id != persona_id
            ).first()
            if existing:
                raise HTTPException(
                    status_code=400,
                    detail=f"Voice persona name '{request.name}' already exists"
                )
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        update_data = request.dict()
        for field, value in update_data.items():
            setattr(persona, field, value)
        
        db.commit()
        db.refresh(persona)
        
        print(f"‚úÖ Updated voice persona: {persona.name}")
        
        return persona.to_dict()
        
    except HTTPException:
        db.rollback()
        raise
    except Exception as e:
        db.rollback()
        handle_database_error(e, "update_voice_persona")

@router.delete("/personas/voice/{persona_id}")
async def delete_voice_persona(persona_id: int, db: Session = Depends(get_db)):
    """
    ‡∏•‡∏ö Voice Persona (soft delete ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
    """
    try:
        persona = db.query(VoicePersona).filter(VoicePersona.id == persona_id).first()
        if not persona:
            raise HTTPException(status_code=404, detail="Voice persona not found")
        
        persona_name = persona.name
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        from ..dependencies import MP3File
        mp3s_using = db.query(MP3File).filter(
            MP3File.voice_persona_id == persona_id
        ).count()
        
        if mp3s_using > 0:
            # Soft delete - ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
            persona.is_active = False
            db.commit()
            
            return {
                "message": f"Voice persona '{persona_name}' deactivated (used by {mp3s_using} MP3 files)",
                "success": True,
                "action": "deactivated",
                "mp3s_affected": mp3s_using
            }
        else:
            # Hard delete - ‡∏•‡∏ö‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            db.delete(persona)
            db.commit()
            
            return {
                "message": f"Voice persona '{persona_name}' deleted successfully",
                "success": True,
                "action": "deleted",
                "mp3s_affected": 0
            }
        
    except HTTPException:
        db.rollback()
        raise
    except Exception as e:
        db.rollback()
        handle_database_error(e, "delete_voice_persona")

# Utility Endpoints
@router.get("/personas/voice/providers/{provider}/voices")
async def get_provider_voices(provider: str):
    """
    ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö TTS provider
    """
    try:
        if provider not in SUPPORTED_TTS_PROVIDERS:
            raise HTTPException(
                status_code=400,
                detail=f"Unsupported provider. Valid options: {SUPPORTED_TTS_PROVIDERS}"
            )
        
        # Mock data - ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å TTS service
        voice_lists = {
            "edge": [
                {"id": "th-TH-PremwadeeNeural", "name": "Premwadee (Female)", "gender": "female"},
                {"id": "th-TH-NiwatNeural", "name": "Niwat (Male)", "gender": "male"},
            ],
            "google": [
                {"id": "th-TH-Standard-A", "name": "Thai Female", "gender": "female"},
                {"id": "th-TH-Wavenet-A", "name": "Thai Female (Premium)", "gender": "female"},
            ],
            "elevenlabs": [
                {"id": "pNInz6obpgDQGcFmaJgB", "name": "Adam", "gender": "male"},
                {"id": "21m00Tcm4TlvDq8ikWAM", "name": "Rachel", "gender": "female"},
            ]
        }
        
        return {
            "provider": provider,
            "voices": voice_lists.get(provider, []),
            "total": len(voice_lists.get(provider, []))
        }
        
    except HTTPException:
        raise
    except Exception as e:
        handle_database_error(e, "get_provider_voices")

@router.post("/personas/voice/{persona_id}/test")
async def test_voice_persona(
    persona_id: int,
    test_text: str = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î",
    db: Session = Depends(get_db)
):
    """
    ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Voice Persona ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    """
    try:
        persona = db.query(VoicePersona).filter(VoicePersona.id == persona_id).first()
        if not persona:
            raise HTTPException(status_code=404, detail="Voice persona not found")
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ TTS test endpoint
        from ..dependencies import tts_service, check_tts_service_availability
        
        tts = check_tts_service_availability()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á voice config ‡∏à‡∏≤‡∏Å persona
        voice_config = {
            "voice": persona.voice_id,
            "voice_id": persona.voice_id,
            "speed": persona.speed,
            "pitch": persona.pitch,
            "volume": persona.volume
        }
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        if hasattr(tts, 'generate_emotional_speech'):
            file_path, web_url = await tts.generate_emotional_speech(
                text=test_text,
                script_id=f"test_persona_{persona_id}",
                provider=persona.tts_provider,
                voice_config=voice_config,
                emotion=getattr(persona, 'emotion', 'professional'),
                intensity=1.0,
                language=persona.language
            )
        else:
            # Fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö basic TTS
            file_path, web_url = await tts.generate_script_audio(
                script_id=f"test_persona_{persona_id}",
                content=test_text,
                language=persona.language,
                voice_persona=voice_config
            )
        
        if file_path and web_url:
            return {
                "success": True,
                "message": f"Voice persona '{persona.name}' test completed",
                "audio_url": web_url,
                "persona_id": persona_id,
                "test_text": test_text,
                "voice_settings": voice_config
            }
        else:
            raise HTTPException(status_code=500, detail="Voice test failed")
        
    except HTTPException:
        raise
    except Exception as e:
        handle_service_error(e, "Voice Persona Test")