# app/api/v1/endpoints/scripts.py
"""
Script Management Endpoints
‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå AI generation ‡πÅ‡∏•‡∏∞ manual creation
"""

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from sqlalchemy import desc
from typing import List
import os

from ..dependencies import (
    get_db, validate_product_exists, validate_script_exists, validate_persona_exists,
    check_ai_service_availability, ai_script_service,
    Script, ScriptType, ScriptStatus, ScriptPersona, MP3File,
    calculate_duration_estimate, safe_file_delete,
    handle_database_error, handle_service_error
)
from ..schemas import (
    AIScriptGenerationRequest, ManualScriptCreateRequest, ScriptUpdateRequest,
    ScriptResponse, ScriptListResponse, SuccessResponse
)

router = APIRouter()

@router.get("/products/{product_id}/scripts", response_model=ScriptListResponse)
async def get_product_scripts(
    product_id: int, 
    db: Session = Depends(get_db)
):
    """
    ‡∏î‡∏∂‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    
    Returns:
        - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
        - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
    """
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô
        await validate_product_exists(product_id, db)
        
        scripts = db.query(Script).filter(
            Script.product_id == product_id
        ).order_by(desc(Script.created_at)).all()
        
        script_list = []
        for script in scripts:
            script_dict = script.to_dict()
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MP3 count
            mp3_count = db.query(MP3File).filter(MP3File.script_id == script.id).count()
            script_dict['mp3_count'] = mp3_count
            
            script_list.append(script_dict)
        
        return {
            "scripts": script_list,
            "total": len(script_list)
        }
        
    except HTTPException:
        raise
    except Exception as e:
        handle_database_error(e, "get_product_scripts")

@router.post("/scripts/generate-ai")
async def generate_ai_scripts(
    request: AIScriptGenerationRequest, 
    db: Session = Depends(get_db)
):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏î‡πâ‡∏ß‡∏¢ AI - MAIN ENDPOINT ‡∏û‡∏£‡πâ‡∏≠‡∏° OpenAI Integration
    
    Features:
    - ‡πÉ‡∏ä‡πâ OpenAI API ‡∏à‡∏£‡∏¥‡∏á
    - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö personas ‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢
    - ‡∏õ‡∏£‡∏±‡∏ö mood ‡πÅ‡∏•‡∏∞ emotion ‡πÑ‡∏î‡πâ
    - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    """
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies
        product = await validate_product_exists(request.product_id, db)
        persona = await validate_persona_exists(request.persona_id, db, "script")
        ai_service = check_ai_service_availability()
        
        print(f"üéØ AI Script Generation Request:")
        print(f"   Product: {product.name} (ID: {request.product_id})")
        print(f"   Persona: {persona.name} (ID: {request.persona_id})")
        print(f"   Mood: {request.mood}")
        print(f"   Count: {request.count}")
        print(f"   Custom Instructions: {request.custom_instructions}")

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏î‡πâ‡∏ß‡∏¢ AI service - ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ OpenAI ‡∏à‡∏£‡∏¥‡∏á
        scripts = await ai_service.generate_scripts(
            db=db,
            product_id=request.product_id,
            persona_id=request.persona_id,
            mood=request.mood,
            count=request.count,
            custom_instructions=request.custom_instructions
        )
        
        print(f"üìä Generated {len(scripts)} AI scripts successfully")
        for i, script in enumerate(scripts):
            print(f"üìÑ Script {i+1}: {script.get('title', 'No title')[:50]}...")
        
        return {
            "message": f"Generated {len(scripts)} AI scripts successfully",
            "scripts": scripts,
            "product_id": request.product_id,
            "persona_id": request.persona_id,
            "generation_details": {
                "mood": request.mood,
                "count": len(scripts),
                "persona_name": persona.name,
                "product_name": product.name,
                "ai_mode": "openai" if hasattr(ai_service, 'client') and ai_service.client else "simulation",
                "custom_instructions_used": bool(request.custom_instructions)
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Error generating AI scripts: {e}")
        handle_service_error(e, "AI Script Generation")

@router.post("/scripts/manual", response_model=ScriptResponse)
async def create_manual_script(
    request: ManualScriptCreateRequest, 
    db: Session = Depends(get_db)
):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á
    
    Features:
    - ‡∏õ‡πâ‡∏≠‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏≠‡∏á
    - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ emotion ‡πÅ‡∏•‡∏∞ CTA
    """
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô
        product = await validate_product_exists(request.product_id, db)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
        duration_estimate = calculate_duration_estimate(request.content)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
        script = Script(
            product_id=request.product_id,
            title=request.title,
            content=request.content,
            script_type=ScriptType.MANUAL,
            language="th",
            target_emotion=request.target_emotion or "professional",
            call_to_action=request.call_to_action or "",
            duration_estimate=duration_estimate,
            status=ScriptStatus.DRAFT
        )
        
        db.add(script)
        db.commit()
        db.refresh(script)
        
        print(f"‚úÖ Created manual script: {script.title}")
        print(f"   üìè Content length: {len(request.content)} chars")
        print(f"   ‚è±Ô∏è Duration estimate: {duration_estimate}s")
        
        return script.to_dict()
        
    except HTTPException:
        db.rollback()
        raise
    except Exception as e:
        db.rollback()
        handle_database_error(e, "create_manual_script")

@router.get("/scripts/{script_id}", response_model=ScriptResponse)
async def get_script(
    script_id: int, 
    db: Session = Depends(get_db)
):
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ï‡∏≤‡∏° ID ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    """
    try:
        script = await validate_script_exists(script_id, db)
        
        script_dict = script.to_dict()
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MP3 files
        if hasattr(script, 'mp3_files'):
            mp3_files = [mp3.to_dict() for mp3 in script.mp3_files]
            script_dict['mp3_files'] = mp3_files
            script_dict['mp3_count'] = len(mp3_files)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        if script.product:
            script_dict['product_name'] = script.product.name
            script_dict['product_sku'] = script.product.sku
        
        return script_dict
        
    except Exception as e:
        handle_database_error(e, "get_script")

@router.put("/scripts/{script_id}", response_model=ScriptResponse)
async def update_script(
    script_id: int, 
    request: ScriptUpdateRequest, 
    db: Session = Depends(get_db)
):
    """
    ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ)
    
    Restrictions:
    - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ MP3 ‡πÅ‡∏•‡πâ‡∏ß
    - ‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö MP3 ‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ
    """
    try:
        script = await validate_script_exists(script_id, db)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if getattr(script, 'has_mp3', False):
            raise HTTPException(
                status_code=400, 
                detail="Script cannot be edited because it has MP3 files. Delete MP3s first to unlock editing."
            )
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏¥‡∏•‡∏î‡πå
        update_data = request.dict(exclude_unset=True)
        for field, value in update_data.items():
            setattr(script, field, value)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô content
        if "content" in update_data:
            script.duration_estimate = calculate_duration_estimate(script.content)
        
        db.commit()
        db.refresh(script)
        
        print(f"‚úÖ Updated script: {script.title}")
        
        return script.to_dict()
        
    except HTTPException:
        db.rollback()
        raise
    except Exception as e:
        db.rollback()
        handle_database_error(e, "update_script")

@router.delete("/scripts/{script_id}", response_model=SuccessResponse)
async def delete_script(
    script_id: int, 
    db: Session = Depends(get_db)
):
    """
    ‡∏•‡∏ö‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå MP3 ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    
    Features:
    - ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå MP3 ‡∏à‡∏≤‡∏Å disk
    - ‡∏•‡∏ö records ‡∏à‡∏≤‡∏Å database
    - ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏•‡∏ö
    """
    try:
        script = await validate_script_exists(script_id, db)
        
        script_title = script.title
        mp3_count = 0
        
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå MP3 ‡∏à‡∏≤‡∏Å disk
        if hasattr(script, 'mp3_files'):
            for mp3 in script.mp3_files:
                if safe_file_delete(mp3.file_path):
                    print(f"üóëÔ∏è Deleted MP3 file: {mp3.file_path}")
                mp3_count += 1
        
        # ‡∏•‡∏ö‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå (cascade ‡∏à‡∏∞‡∏•‡∏ö MP3 records)
        db.delete(script)
        db.commit()
        
        print(f"üóëÔ∏è Deleted script: {script_title}")
        
        return {
            "message": f"Script '{script_title}' deleted successfully",
            "success": True,
            "deleted_mp3_files": mp3_count
        }
        
    except HTTPException:
        db.rollback()
        raise
    except Exception as e:
        db.rollback()
        handle_database_error(e, "delete_script")

@router.get("/scripts/{script_id}/mp3")
async def get_script_mp3_files(
    script_id: int, 
    db: Session = Depends(get_db)
):
    """
    ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå MP3 ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
    """
    try:
        script = await validate_script_exists(script_id, db)
        
        mp3_files = db.query(MP3File).filter(MP3File.script_id == script_id).all()
        
        return {
            "script_id": script_id,
            "script_title": script.title,
            "mp3_files": [mp3.to_dict() for mp3 in mp3_files],
            "total_files": len(mp3_files)
        }
        
    except HTTPException:
        raise
    except Exception as e:
        handle_database_error(e, "get_script_mp3_files")

@router.delete("/scripts/{script_id}/mp3", response_model=SuccessResponse)
async def delete_script_mp3(
    script_id: int, 
    db: Session = Depends(get_db)
):
    """
    ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå MP3 ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    
    Features:
    - ‡∏•‡∏ö MP3 files ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
    - ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ
    - ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏ö
    """
    try:
        script = await validate_script_exists(script_id, db)
        
        # ‡∏î‡∏∂‡∏á MP3 files ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        mp3_files = db.query(MP3File).filter(MP3File.script_id == script_id).all()
        
        if not mp3_files:
            raise HTTPException(status_code=404, detail="No MP3 files found for this script")
        
        deleted_files = []
        
        # ‡∏•‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
        for mp3_file in mp3_files:
            filename = mp3_file.filename
            
            # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å disk
            if safe_file_delete(mp3_file.file_path):
                print(f"üóëÔ∏è Deleted file: {mp3_file.file_path}")
            
            # ‡∏•‡∏ö record ‡∏à‡∏≤‡∏Å database
            db.delete(mp3_file)
            deleted_files.append(filename)
        
        # ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
        script.has_mp3 = False
        if hasattr(script, 'is_editable'):
            script.is_editable = True
        
        db.commit()
        
        print(f"üîì Unlocked script for editing: {script.title}")
        
        return {
            "message": f"Deleted {len(deleted_files)} MP3 file(s) for script '{script.title}'",
            "success": True,
            "deleted_files": deleted_files,
            "script_unlocked": True,
            "script_id": script_id
        }
        
    except HTTPException:
        db.rollback()
        raise
    except Exception as e:
        db.rollback()
        handle_database_error(e, "delete_script_mp3")

@router.post("/scripts/{script_id}/duplicate", response_model=ScriptResponse)
async def duplicate_script(
    script_id: int,
    new_title: str,
    db: Session = Depends(get_db)
):
    """
    Duplicate ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
    """
    try:
        original_script = await validate_script_exists(script_id, db)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà
        script_dict = original_script.to_dict()
        
        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á copy
        exclude_fields = ['id', 'created_at', 'updated_at', 'has_mp3']
        for field in exclude_fields:
            script_dict.pop(field, None)
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠
        script_dict['title'] = new_title
        script_dict['has_mp3'] = False
        script_dict['status'] = ScriptStatus.DRAFT
        
        new_script = Script(**script_dict)
        
        db.add(new_script)
        db.commit()
        db.refresh(new_script)
        
        print(f"üìã Duplicated script: {original_script.title} -> {new_script.title}")
        
        return new_script.to_dict()
        
    except HTTPException:
        db.rollback()
        raise
    except Exception as e:
        db.rollback()
        handle_database_error(e, "duplicate_script")

@router.get("/scripts/search")
async def search_scripts(
    query: str,
    product_id: int = None,
    script_type: str = None,
    has_mp3: bool = None,
    limit: int = 20,
    db: Session = Depends(get_db)
):
    """
    ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÅ‡∏ö‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
    """
    try:
        scripts_query = db.query(Script)
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
        search_term = f"%{query}%"
        scripts_query = scripts_query.filter(
            (Script.title.ilike(search_term)) |
            (Script.content.ilike(search_term)) |
            (Script.call_to_action.ilike(search_term))
        )
        
        # ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
        if product_id:
            scripts_query = scripts_query.filter(Script.product_id == product_id)
            
        if script_type:
            try:
                type_enum = ScriptType(script_type)
                scripts_query = scripts_query.filter(Script.script_type == type_enum)
            except ValueError:
                raise HTTPException(status_code=400, detail=f"Invalid script_type: {script_type}")
                
        if has_mp3 is not None:
            scripts_query = scripts_query.filter(Script.has_mp3 == has_mp3)
        
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
        scripts = scripts_query.order_by(desc(Script.created_at)).limit(limit).all()
        
        results = []
        for script in scripts:
            script_dict = script.to_dict()
            if script.product:
                script_dict['product_name'] = script.product.name
            results.append(script_dict)
        
        return {
            "query": query,
            "results": results,
            "total_found": len(results),
            "limit": limit
        }
        
    except HTTPException:
        raise
    except Exception as e:
        handle_database_error(e, "search_scripts")