# app/services/tts/audio_processor.py
"""Audio Processing and Metadata Management"""

import re
from pathlib import Path
from datetime import datetime
from typing import Optional

from .tts_config import AUDIO_PROCESSING_AVAILABLE

if AUDIO_PROCESSING_AVAILABLE:
    from pydub import AudioSegment
    from pydub.effects import normalize, compress_dynamic_range
    from mutagen.mp3 import MP3
    from mutagen.id3 import ID3, TIT2, TPE1, TALB, TDRC, TCON

class AudioProcessor:
    """Audio Processing and Enhancement Manager"""
    
    @staticmethod
    def clean_text_for_tts(text: str) -> str:
        """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ TTS ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô contamination"""
        
        # ‡∏•‡∏ö HTML tags
        text = re.sub(r'<[^>]+>', '', text)
        
        # ‡∏•‡∏ö special characters ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ TTS ‡∏™‡∏±‡∏ö‡∏™‡∏ô
        text = re.sub(r'[^\u0E00-\u0E7Fa-zA-Z0-9\s\.,!?\-]', '', text)
        
        # ‡∏•‡∏ö multiple spaces
        text = re.sub(r'\s+', ' ', text)
        
        # ‡∏•‡∏ö leading/trailing spaces
        text = text.strip()
        
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô buffer overflow
        if len(text) > 1000:
            text = text[:1000] + "..."
        
        return text

    @staticmethod
    def clean_metadata(file_path: Path, script_title: str = "", emotion: str = ""):
        """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ metadata ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"""
        try:
            if not AUDIO_PROCESSING_AVAILABLE:
                print("   ‚ö†Ô∏è Audio processing not available for metadata cleaning")
                return
            
            # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå MP3
            audio_file = MP3(str(file_path))
            
            # ‡∏•‡∏ö metadata ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            audio_file.delete()
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á ID3 tags ‡πÉ‡∏´‡∏°‡πà
            audio_file.add_tags()
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ metadata ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö‡∏™‡∏∞‡∏≠‡∏≤‡∏î
            audio_file.tags.add(TIT2(encoding=3, text=script_title or "AI Live Commerce Script"))
            audio_file.tags.add(TPE1(encoding=3, text="AI Live Commerce TTS"))
            audio_file.tags.add(TALB(encoding=3, text="Product Scripts"))
            audio_file.tags.add(TDRC(encoding=3, text=str(datetime.now().year)))
            audio_file.tags.add(TCON(encoding=3, text=f"Speech/{emotion}"))
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å metadata ‡πÉ‡∏´‡∏°‡πà
            audio_file.save()
            
            print("   üè∑Ô∏è Metadata cleaned and updated")
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è Metadata cleaning failed: {e}")
            # ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ

    @staticmethod
    async def enhance_audio_quality(file_path: Path, script_title: str = "", emotion: str = ""):
        """‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î metadata"""
        try:
            if not AUDIO_PROCESSING_AVAILABLE:
                return
                
            print("   üéß Enhancing audio quality...")
            
            # ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            audio = AudioSegment.from_file(file_path)
            
            # Normalize volume
            audio = normalize(audio)
            
            # Compress dynamic range ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
            audio = compress_dynamic_range(audio, threshold=-20.0, ratio=2.0, attack=5.0, release=50.0)
            
            # ‡∏õ‡∏£‡∏±‡∏ö sample rate ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏î‡∏µ
            audio = audio.set_frame_rate(22050)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            temp_path = file_path.with_suffix('.tmp.mp3')
            
            # Export ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            audio.export(
                temp_path, 
                format="mp3", 
                bitrate="128k",
                parameters=["-q:a", "2", "-ar", "22050"]  # ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á
            )
            
            # ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏°‡∏≤‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
            if temp_path.exists():
                file_path.unlink()  # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
                temp_path.rename(file_path)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
            
            # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î metadata
            AudioProcessor.clean_metadata(file_path, script_title, emotion)
            
            print("   ‚úÖ Audio quality enhanced and metadata cleaned")
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è Audio enhancement failed: {e}")
            # ‡∏•‡∏≠‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î metadata ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            try:
                AudioProcessor.clean_metadata(file_path, script_title, emotion)
            except:
                pass

    @staticmethod
    async def fix_lame_padding_and_contamination(temp_path: Path, final_path: Path, script_title: str, emotion: str) -> bool:
        """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ LAME Encoder Padding ‡πÅ‡∏•‡∏∞ Audio Contamination"""
        
        try:
            if not AUDIO_PROCESSING_AVAILABLE:
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ audio processing ‡πÉ‡∏´‡πâ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏£‡∏á‡πÜ
                temp_path.rename(final_path)
                return True
            
            print("   üîß Fixing LAME padding and contamination...")
            
            # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            audio = AudioSegment.from_file(temp_path)
            original_duration = len(audio) / 1000
            
            print(f"   ‚è±Ô∏è Original duration: {original_duration:.1f}s")
            
            # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ LAME padding ‡πÅ‡∏•‡∏∞ contamination
            fixed_audio = AudioProcessor._remove_lame_padding_and_silence(audio)
            
            if fixed_audio:
                final_duration = len(fixed_audio) / 1000
                print(f"   ‚úÇÔ∏è Fixed duration: {final_duration:.1f}s (removed {original_duration - final_duration:.1f}s)")
                
                # Normalize ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
                fixed_audio = normalize(fixed_audio)
                fixed_audio = fixed_audio.set_frame_rate(22050)
                
                # Export ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ LAME encoder ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô padding
                fixed_audio.export(
                    final_path,
                    format="mp3",
                    bitrate="128k",
                    parameters=[
                        "-q:a", "2",           # ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á
                        "-ar", "22050",        # Sample rate
                        "-write_xing", "0",    # ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô XING header
                        "-id3v2_version", "0", # ‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà ID3v2 tags
                        "-write_id3v1", "0"    # ‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà ID3v1 tags
                    ]
                )
                
                # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
                if temp_path.exists():
                    temp_path.unlink()
                
                print("   üéØ LAME padding and contamination removed successfully")
                return True
            else:
                print("   ‚ùå Could not fix LAME padding")
                # ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
                temp_path.rename(final_path)
                return True
                
        except Exception as e:
            print(f"   ‚ùå LAME padding fix failed: {e}")
            
            # ‡∏´‡∏≤‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡πÉ‡∏´‡πâ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
            try:
                if temp_path.exists():
                    temp_path.rename(final_path)
                return True
            except:
                return False

    @staticmethod
    def _remove_lame_padding_and_silence(audio: 'AudioSegment') -> 'AudioSegment':
        """‡∏Å‡∏≥‡∏à‡∏±‡∏î LAME padding ‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"""
        
        try:
            print("   üîç Analyzing audio for padding and silence...")
            
            # Parameters ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            silence_threshold = -50  # dB
            chunk_size = 100  # ms
            
            # ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏£‡∏¥‡∏á (‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡∏ï‡πâ‡∏ô)
            start_pos = 0
            for i in range(0, len(audio), chunk_size):
                chunk = audio[i:i + chunk_size]
                if len(chunk) < chunk_size:
                    break
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì volume level
                if hasattr(chunk, 'dBFS'):
                    volume = chunk.dBFS
                else:
                    volume = chunk.rms if hasattr(chunk, 'rms') else -60
                
                if volume > silence_threshold:
                    start_pos = max(0, i - chunk_size)  # ‡πÄ‡∏Å‡πá‡∏ö buffer ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                    print(f"   üéØ Found audio start at: {start_pos/1000:.1f}s")
                    break
            
            # ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏£‡∏¥‡∏á (‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡∏ó‡πâ‡∏≤‡∏¢)
            end_pos = len(audio)
            for i in range(len(audio) - chunk_size, 0, -chunk_size):
                chunk = audio[i:i + chunk_size]
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì volume level
                if hasattr(chunk, 'dBFS'):
                    volume = chunk.dBFS
                else:
                    volume = chunk.rms if hasattr(chunk, 'rms') else -60
                
                if volume > silence_threshold:
                    end_pos = min(len(audio), i + chunk_size * 2)  # ‡πÄ‡∏Å‡πá‡∏ö buffer ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                    print(f"   üéØ Found audio end at: {end_pos/1000:.1f}s")
                    break
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•
            trimmed_duration = (end_pos - start_pos) / 1000
            
            if trimmed_duration < 0.5:
                print(f"   ‚ö†Ô∏è Trimmed audio too short ({trimmed_duration:.1f}s), using minimal trim")
                # ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡πÅ‡∏ö‡∏ö‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
                start_pos = min(start_pos, len(audio) * 0.1)  # ‡∏ï‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10% ‡∏ï‡πâ‡∏ô
                end_pos = max(end_pos, len(audio) * 0.9)      # ‡∏ï‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10% ‡∏ó‡πâ‡∏≤‡∏¢
            
            # ‡∏ï‡∏±‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            if start_pos > 0 or end_pos < len(audio):
                trimmed_audio = audio[start_pos:end_pos]
                print(f"   ‚úÖ Trimmed from {len(audio)/1000:.1f}s to {len(trimmed_audio)/1000:.1f}s")
                return trimmed_audio
            else:
                print("   ‚ÑπÔ∏è No trimming needed")
                return audio
                
        except Exception as e:
            print(f"   ‚ùå Padding removal failed: {e}")
            return audio

    @staticmethod
    async def convert_to_mp3(wav_path: Path, script_title: str = "", emotion: str = "") -> Path:
        """‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå WAV ‡πÄ‡∏õ‡πá‡∏ô MP3 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î metadata"""
        try:
            if not AUDIO_PROCESSING_AVAILABLE:
                return wav_path
                
            mp3_path = wav_path.with_suffix('.mp3')
            audio = AudioSegment.from_wav(wav_path)
            
            # Export ‡πÄ‡∏õ‡πá‡∏ô MP3 ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ
            audio.export(
                mp3_path, 
                format="mp3", 
                bitrate="128k",
                parameters=["-q:a", "2"]
            )
            
            # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå WAV
            if wav_path.exists():
                wav_path.unlink()
            
            # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î metadata
            AudioProcessor.clean_metadata(mp3_path, script_title, emotion)
                
            return mp3_path
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è MP3 conversion failed: {e}")
            return wav_path