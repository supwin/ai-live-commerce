# app/services/ai_script_service.py
"""
AI-powered script generation service using ChatGPT
"""

import os
import asyncio
from typing import List, Dict, Any, Optional
from openai import AsyncOpenAI
import json
import random

from app.models.product import Product

class AIScriptService:
    """AI Script Generation Service using ChatGPT"""
    
    def __init__(self):
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            print("‚ö†Ô∏è OPENAI_API_KEY not found, using fallback templates")
            self.client = None
        else:
            self.client = AsyncOpenAI(api_key=api_key)
            print("‚úÖ OpenAI client initialized")
    
    def _get_system_prompt(self) -> str:
        """Get system prompt for ChatGPT"""
        return """‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡∏∞ Live Commerce ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏π‡∏á

‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:
- ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡πÇ‡∏ô‡πâ‡∏°‡∏ô‡πâ‡∏≤‡∏ß‡πÉ‡∏à
- ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ö‡∏ö
- ‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 80-120 ‡∏Ñ‡∏≥

‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô:
- ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£
- ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠
- ‡πÄ‡∏ô‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
- ‡πÉ‡∏ä‡πâ emoji ‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á‡πÅ‡∏ï‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ"""

    def _get_script_prompts(self, product: Product) -> List[Dict[str, str]]:
        """Get prompts for different script types"""
        
        price_text = f"{product.price:,.0f}"
        
        prompts = [
            {
                "type": "emotional",
                "title": "‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
                "prompt": f"""‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:
                
‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {product.name}
‡∏£‡∏≤‡∏Ñ‡∏≤: {price_text} ‡∏ö‡∏≤‡∏ó
‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: {product.description}
‡∏™‡∏ï‡πá‡∏≠‡∏Å: {product.stock} ‡∏ä‡∏¥‡πâ‡∏ô
‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: {product.category}

‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏µ‡πà:
- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô (FOMO)
- ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡∏¢‡∏≤‡∏Å
- ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
- ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏õ‡∏è‡∏¥‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå
- ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ï‡πá‡∏≠‡∏Å"""
            },
            {
                "type": "informative", 
                "title": "‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
                "prompt": f"""‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:

‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {product.name}
‡∏£‡∏≤‡∏Ñ‡∏≤: {price_text} ‡∏ö‡∏≤‡∏ó  
‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: {product.description}
‡∏™‡∏ï‡πá‡∏≠‡∏Å: {product.stock} ‡∏ä‡∏¥‡πâ‡∏ô
‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: {product.category}

‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏µ‡πà:
- ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
- ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥
- ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤
- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠
- ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏ô‡πâ‡∏°‡∏ô‡πâ‡∏≤‡∏ß"""
            },
            {
                "type": "interactive",
                "title": "‡πÅ‡∏ö‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏è‡∏¥‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå", 
                "prompt": f"""‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:

‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {product.name}
‡∏£‡∏≤‡∏Ñ‡∏≤: {price_text} ‡∏ö‡∏≤‡∏ó
‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: {product.description} 
‡∏™‡∏ï‡πá‡∏≠‡∏Å: {product.stock} ‡∏ä‡∏¥‡πâ‡∏ô
‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: {product.category}

‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏µ‡πà:
- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏£‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏î‡∏π‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°
- ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô
- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏ô‡∏∏‡∏Å‡∏™‡∏ô‡∏≤‡∏ô
- ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏á‡πà‡∏≤‡∏¢
- ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏ä‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á"""
            }
        ]
        
        return prompts

    async def generate_ai_scripts(self, product: Product) -> List[Dict[str, str]]:
        """Generate 3 AI-powered scripts for a product"""
        
        if not self.client:
            print("‚ö†Ô∏è OpenAI not available, using fallback")
            return self._get_fallback_scripts(product)
        
        try:
            prompts = self._get_script_prompts(product)
            scripts = []
            
            system_prompt = self._get_system_prompt()
            
            # Generate each script type
            for prompt_data in prompts:
                print(f"ü§ñ Generating {prompt_data['title']}...")
                
                response = await self.client.chat.completions.create(
                    model="gpt-3.5-turbo",  # ‡∏´‡∏£‡∏∑‡∏≠ "gpt-4" ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": prompt_data['prompt']}
                    ],
                    max_tokens=300,
                    temperature=0.8,  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏™‡∏π‡∏á‡∏´‡∏ô‡πà‡∏≠‡∏¢
                    presence_penalty=0.1,
                    frequency_penalty=0.1
                )
                
                script_content = response.choices[0].message.content.strip()
                
                scripts.append({
                    "title": prompt_data["title"],
                    "content": script_content,
                    "script_type": prompt_data["type"]
                })
                
                print(f"‚úÖ Generated {prompt_data['title']}")
                
                # ‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ hit rate limit
                await asyncio.sleep(0.5)
            
            print(f"üéâ Generated {len(scripts)} AI scripts for {product.name}")
            return scripts
            
        except Exception as e:
            print(f"‚ùå AI script generation failed: {e}")
            print("üîÑ Falling back to template scripts...")
            return self._get_fallback_scripts(product)
    
    def _get_fallback_scripts(self, product: Product) -> List[Dict[str, str]]:
        """Fallback template scripts when AI is not available"""
        
        price_text = f"{product.price:,.0f}"
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á template ‡πÉ‡∏´‡πâ‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
        emotional_variations = [
            f"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏© {product.name} ‡∏°‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥! {product.description} ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏û‡∏µ‡∏¢‡∏á {price_text} ‡∏ö‡∏≤‡∏ó‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô! ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ô‡∏µ‡πâ‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏¢‡∏≤‡∏Å‡∏°‡∏≤‡∏Å ‡∏£‡∏µ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏°‡∏î‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö! üî•",
            f"‡πÄ‡∏Æ‡πâ‡∏¢! ‡πÉ‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞! {product.name} ‡∏™‡∏∏‡∏î‡∏Æ‡∏¥‡∏ï {product.description} ‡∏•‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {price_text} ‡∏ö‡∏≤‡∏ó! ‡∏Ç‡∏≠‡∏á‡∏î‡∏µ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏´‡∏≤‡∏¢‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÜ ‡πÑ‡∏°‡πà‡∏£‡∏µ‡∏ö‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ô‡πÅ‡∏ô‡πà! üî•",
            f"‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏∏‡∏î‡πÜ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô! {product.name} {product.description} ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏ö‡πÄ‡∏û‡∏µ‡∏¢‡∏á {price_text} ‡∏ö‡∏≤‡∏ó! ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏°‡∏µ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏û‡∏µ‡∏¢‡∏á {product.stock} ‡∏ä‡∏¥‡πâ‡∏ô ‡πÉ‡∏Ñ‡∏£‡πÄ‡∏£‡πá‡∏ß‡πÑ‡∏î‡πâ‡∏Å‡πà‡∏≠‡∏ô! üí•"
        ]
        
        informative_variations = [
            f"‡∏Ç‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ {product.name} ‡∏Ñ‡∏£‡∏±‡∏ö {product.description} ‡πÉ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î {price_text} ‡∏ö‡∏≤‡∏ó ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà {product.category} ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏° ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏°‡∏µ‡∏à‡∏≥‡∏Å‡∏±‡∏î {product.stock} ‡∏ä‡∏¥‡πâ‡∏ô",
            f"‡∏°‡∏≤‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö {product.name} {product.description} ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏û‡∏µ‡∏¢‡∏á {price_text} ‡∏ö‡∏≤‡∏ó ‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÜ ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î {product.category} ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ó‡πâ 100% ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û",
            f"‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡∏µ {product.name} {product.description} ‡πÄ‡∏û‡∏µ‡∏¢‡∏á {price_text} ‡∏ö‡∏≤‡∏ó ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô! ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà {product.category} ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î {product.stock} ‡∏ä‡∏¥‡πâ‡∏ô"
        ]
        
        interactive_variations = [
            f"‡πÄ‡∏Æ‡πâ‡∏¢‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô! ‡πÉ‡∏Ñ‡∏£‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≠‡∏á‡∏´‡∏≤ {product.name} ‡∏ö‡πâ‡∏≤‡∏á? üôã‚Äç‚ôÄÔ∏è {product.description} ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡∏µ‡∏™‡∏∏‡∏î‡πÜ {price_text} ‡∏ö‡∏≤‡∏ó! ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏™‡∏ô‡πÉ‡∏à' ‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏´‡∏ô‡πà‡∏≠‡∏¢! ‡πÉ‡∏Ñ‡∏£‡πÄ‡∏£‡πá‡∏ß‡πÑ‡∏î‡πâ‡πÇ‡∏õ‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©! üíù",
            f"‡∏Ñ‡∏∑‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡∏î‡∏µ‡∏°‡∏≤‡πÇ‡∏ä‡∏ß‡πå! {product.name} {product.description} ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏û‡∏µ‡∏¢‡∏á {price_text} ‡∏ö‡∏≤‡∏ó! ‡πÉ‡∏Ñ‡∏£‡∏ä‡∏≠‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå ‚ù§Ô∏è ‡πÉ‡∏ô chat ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å‡πÑ‡∏î‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°! üéÅ",
            f"‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏´‡∏°? {product.name} {product.description} ‡πÇ‡∏õ‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏© {price_text} ‡∏ö‡∏≤‡∏ó! ‡πÉ‡∏Ñ‡∏£‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏Å‡∏î‡πÑ‡∏•‡∏Ñ‡πå‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏´‡∏ô‡πà‡∏≠‡∏¢! ‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á {product.stock} ‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô! üéâ"
        ]
        
        return [
            {
                "title": "‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
                "content": random.choice(emotional_variations),
                "script_type": "emotional"
            },
            {
                "title": "‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", 
                "content": random.choice(informative_variations),
                "script_type": "informative"
            },
            {
                "title": "‡πÅ‡∏ö‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏è‡∏¥‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå",
                "content": random.choice(interactive_variations),
                "script_type": "interactive"
            }
        ]
    
    async def generate_custom_script(
        self,
        product: Product,
        style: str = "friendly",
        focus: str = "benefits",
        length: str = "medium"
    ) -> str:
        """Generate a custom script with specific parameters"""
        
        if not self.client:
            return self._get_fallback_scripts(product)[0]["content"]
        
        try:
            custom_prompt = f"""‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:
            
‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {product.name}
‡∏£‡∏≤‡∏Ñ‡∏≤: {product.price:,.0f} ‡∏ö‡∏≤‡∏ó
‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: {product.description}

‡∏™‡πÑ‡∏ï‡∏•‡πå: {style}
‡πÄ‡∏ô‡πâ‡∏ô: {focus}  
‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß: {length}

‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡∏≤‡∏°‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""

            response = await self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": self._get_system_prompt()},
                    {"role": "user", "content": custom_prompt}
                ],
                max_tokens=250,
                temperature=0.7
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            print(f"‚ùå Custom script generation failed: {e}")
            return self._get_fallback_scripts(product)[0]["content"]

# Global AI script service instance
ai_script_service = AIScriptService()

# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ class
__all__ = ['AIScriptService', 'ai_script_service']